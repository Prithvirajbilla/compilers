
Production Rules
(rule precedences determined from %prec or 1st terminal between parentheses):
1: program ->  optional_declaration_list procedure_definition
2: optional_declaration_list ->  <empty>
3: optional_declaration_list ->  variable_declaration_list
4: procedure_definition (NAME) ->  NAME '(' ')' #0001 '{' optional_variable_declaration_list #0002 basic_block_list '}'
5: #0001 ->  <empty>
6: #0002 ->  <empty>
7: optional_variable_declaration_list ->  <empty>
8: optional_variable_declaration_list ->  variable_declaration_list
9: variable_declaration_list ->  variable_declaration
10: variable_declaration_list ->  variable_declaration_list variable_declaration
11: variable_declaration (';') ->  declaration ';'
12: declaration (INTEGER) ->  INTEGER NAME
13: basic_block_list ->  basic_block_list basic_block
14: basic_block_list ->  basic_block
15: basic_block (BBNUM) ->  BBNUM ':' executable_statement_list
16: executable_statement_list ->  assignment_statement_list
17: executable_statement_list (RETURN) ->  assignment_statement_list RETURN ';'
18: executable_statement_list ->  assignment_statement_list IFELSE
19: executable_statement_list ->  assignment_statement_list GOTO_exp
20: assignment_statement_list ->  <empty>
21: assignment_statement_list ->  assignment_statement_list assignment_statement
22: assignment_statement (ASSIGN) ->  variable ASSIGN conditional_exp ';'
23: IFELSE (IF) ->  IF '(' conditional_exp ')' GOTO_exp ELSE GOTO_exp
24: GOTO_exp (GOTO) ->  GOTO BBNUM ';'
25: conditional_exp ('(') ->  '(' conditional_exp ')'
26: conditional_exp (OP2) ->  conditional_exp OP2 conditional_exp
27: conditional_exp (OP3) ->  conditional_exp OP3 conditional_exp
28: conditional_exp (OP4) ->  conditional_exp OP4 conditional_exp
29: conditional_exp (OP5) ->  conditional_exp OP5 conditional_exp
30: conditional_exp (OP6) ->  conditional_exp OP6 conditional_exp
31: conditional_exp (OP7) ->  conditional_exp OP7 conditional_exp
32: conditional_exp ->  variable
33: conditional_exp ->  constant
34: variable (NAME) ->  NAME
35: constant (INTEGER_NUMBER) ->  INTEGER_NUMBER
36: program_$ ->  program


Symbolic Terminal tokens:
       error
       EOF
   257: INTEGER_NUMBER
   258: BBNUM
   259: NAME
   260: RETURN
   261: INTEGER
   262: ASSIGN
   263: IF
   264: ELSE
   265: GOTO
   266: OP2
   267: OP3
   268: OP7
   269: OP5
   270: OP6
   271: OP4
    40: '('
    41: ')'
   123: '{'
   125: '}'
    59: ';'
    58: ':'


Grammar States: 
State 0:
36: program_$ ->  . program 
  0:   On program to state 1
  1:   On optional_declaration_list to state 2
  2:   On variable_declaration_list to state 3
  3:   On variable_declaration to state 4
  4:   On declaration to state 5
  5:   On INTEGER to state 6
  Reduce by 2: optional_declaration_list ->  . 


State 1:
36: program_$ -> program  . 


State 2:
1: program -> optional_declaration_list  . procedure_definition 
  0:   On procedure_definition to state 7
  1:   On NAME to state 8


State 3:
3: optional_declaration_list -> variable_declaration_list  . 
10: variable_declaration_list -> variable_declaration_list  . variable_declaration 
  0:   On variable_declaration to state 9
  1:   On declaration to state 5
  2:   On INTEGER to state 6
  Reduce by 3: optional_declaration_list -> variable_declaration_list  . 


State 4:
9: variable_declaration_list -> variable_declaration  . 
  Reduce by 9: variable_declaration_list -> variable_declaration  . 


State 5:
11: variable_declaration -> declaration  . ';' 
  0:   On ';' to state 10


State 6:
12: declaration -> INTEGER  . NAME 
  0:   On NAME to state 11


State 7:
1: program -> optional_declaration_list procedure_definition  . 
  Reduce by 1: program -> optional_declaration_list procedure_definition  . 


State 8:
4: procedure_definition -> NAME  . '(' ')' #0001 '{' optional_variable_declaration_list #0002 basic_block_list '}' 
  0:   On '(' to state 12


State 9:
10: variable_declaration_list -> variable_declaration_list variable_declaration  . 
  Reduce by 10: variable_declaration_list -> variable_declaration_list variable_declaration  . 


State 10:
11: variable_declaration -> declaration ';'  . 
  Reduce by 11: variable_declaration -> declaration ';'  . 


State 11:
12: declaration -> INTEGER NAME  . 
  Reduce by 12: declaration -> INTEGER NAME  . 


State 12:
4: procedure_definition -> NAME '('  . ')' #0001 '{' optional_variable_declaration_list #0002 basic_block_list '}' 
  0:   On ')' to state 13


State 13:
4: procedure_definition -> NAME '(' ')'  . #0001 '{' optional_variable_declaration_list #0002 basic_block_list '}' 
  0:   On #0001 to state 14
  Reduce by 5: #0001 ->  . 


State 14:
4: procedure_definition -> NAME '(' ')' #0001  . '{' optional_variable_declaration_list #0002 basic_block_list '}' 
  0:   On '{' to state 15


State 15:
4: procedure_definition -> NAME '(' ')' #0001 '{'  . optional_variable_declaration_list #0002 basic_block_list '}' 
  0:   On optional_variable_declaration_list to state 16
  1:   On variable_declaration_list to state 17
  2:   On variable_declaration to state 4
  3:   On declaration to state 5
  4:   On INTEGER to state 6
  Reduce by 7: optional_variable_declaration_list ->  . 


State 16:
4: procedure_definition -> NAME '(' ')' #0001 '{' optional_variable_declaration_list  . #0002 basic_block_list '}' 
  0:   On #0002 to state 18
  Reduce by 6: #0002 ->  . 


State 17:
8: optional_variable_declaration_list -> variable_declaration_list  . 
10: variable_declaration_list -> variable_declaration_list  . variable_declaration 
  0:   On variable_declaration to state 9
  1:   On declaration to state 5
  2:   On INTEGER to state 6
  Reduce by 8: optional_variable_declaration_list -> variable_declaration_list  . 


State 18:
4: procedure_definition -> NAME '(' ')' #0001 '{' optional_variable_declaration_list #0002  . basic_block_list '}' 
  0:   On basic_block_list to state 19
  1:   On basic_block to state 20
  2:   On BBNUM to state 21


State 19:
4: procedure_definition -> NAME '(' ')' #0001 '{' optional_variable_declaration_list #0002 basic_block_list  . '}' 
13: basic_block_list -> basic_block_list  . basic_block 
  0:   On '}' to state 22
  1:   On basic_block to state 23
  2:   On BBNUM to state 21


State 20:
14: basic_block_list -> basic_block  . 
  Reduce by 14: basic_block_list -> basic_block  . 


State 21:
15: basic_block -> BBNUM  . ':' executable_statement_list 
  0:   On ':' to state 24


State 22:
4: procedure_definition -> NAME '(' ')' #0001 '{' optional_variable_declaration_list #0002 basic_block_list '}'  . 
  Reduce by 4: procedure_definition -> NAME '(' ')' #0001 '{' optional_variable_declaration_list #0002 basic_block_list '}'  . 


State 23:
13: basic_block_list -> basic_block_list basic_block  . 
  Reduce by 13: basic_block_list -> basic_block_list basic_block  . 


State 24:
15: basic_block -> BBNUM ':'  . executable_statement_list 
  0:   On executable_statement_list to state 25
  1:   On assignment_statement_list to state 26
  Reduce by 20: assignment_statement_list ->  . 


State 25:
15: basic_block -> BBNUM ':' executable_statement_list  . 
  Reduce by 15: basic_block -> BBNUM ':' executable_statement_list  . 


State 26:
16: executable_statement_list -> assignment_statement_list  . 
17: executable_statement_list -> assignment_statement_list  . RETURN ';' 
18: executable_statement_list -> assignment_statement_list  . IFELSE 
19: executable_statement_list -> assignment_statement_list  . GOTO_exp 
21: assignment_statement_list -> assignment_statement_list  . assignment_statement 
  0:   On RETURN to state 27
  1:   On IFELSE to state 28
  2:   On GOTO_exp to state 29
  3:   On assignment_statement to state 30
  4:   On IF to state 31
  5:   On GOTO to state 32
  6:   On variable to state 33
  7:   On NAME to state 34
  Reduce by 16: executable_statement_list -> assignment_statement_list  . 


State 27:
17: executable_statement_list -> assignment_statement_list RETURN  . ';' 
  0:   On ';' to state 35


State 28:
18: executable_statement_list -> assignment_statement_list IFELSE  . 
  Reduce by 18: executable_statement_list -> assignment_statement_list IFELSE  . 


State 29:
19: executable_statement_list -> assignment_statement_list GOTO_exp  . 
  Reduce by 19: executable_statement_list -> assignment_statement_list GOTO_exp  . 


State 30:
21: assignment_statement_list -> assignment_statement_list assignment_statement  . 
  Reduce by 21: assignment_statement_list -> assignment_statement_list assignment_statement  . 


State 31:
23: IFELSE -> IF  . '(' conditional_exp ')' GOTO_exp ELSE GOTO_exp 
  0:   On '(' to state 36


State 32:
24: GOTO_exp -> GOTO  . BBNUM ';' 
  0:   On BBNUM to state 37


State 33:
22: assignment_statement -> variable  . ASSIGN conditional_exp ';' 
  0:   On ASSIGN to state 38


State 34:
34: variable -> NAME  . 
  Reduce by 34: variable -> NAME  . 


State 35:
17: executable_statement_list -> assignment_statement_list RETURN ';'  . 
  Reduce by 17: executable_statement_list -> assignment_statement_list RETURN ';'  . 


State 36:
23: IFELSE -> IF '('  . conditional_exp ')' GOTO_exp ELSE GOTO_exp 
  0:   On conditional_exp to state 39
  1:   On '(' to state 40
  2:   On variable to state 41
  3:   On constant to state 42
  4:   On NAME to state 34
  5:   On INTEGER_NUMBER to state 43


State 37:
24: GOTO_exp -> GOTO BBNUM  . ';' 
  0:   On ';' to state 44


State 38:
22: assignment_statement -> variable ASSIGN  . conditional_exp ';' 
  0:   On conditional_exp to state 45
  1:   On '(' to state 40
  2:   On variable to state 41
  3:   On constant to state 42
  4:   On NAME to state 34
  5:   On INTEGER_NUMBER to state 43


State 39:
23: IFELSE -> IF '(' conditional_exp  . ')' GOTO_exp ELSE GOTO_exp 
26: conditional_exp -> conditional_exp  . OP2 conditional_exp 
27: conditional_exp -> conditional_exp  . OP3 conditional_exp 
28: conditional_exp -> conditional_exp  . OP4 conditional_exp 
29: conditional_exp -> conditional_exp  . OP5 conditional_exp 
30: conditional_exp -> conditional_exp  . OP6 conditional_exp 
31: conditional_exp -> conditional_exp  . OP7 conditional_exp 
  0:   On ')' to state 46
  1:   On OP2 to state 47
  2:   On OP3 to state 48
  3:   On OP4 to state 49
  4:   On OP5 to state 50
  5:   On OP6 to state 51
  6:   On OP7 to state 52


State 40:
25: conditional_exp -> '('  . conditional_exp ')' 
  0:   On conditional_exp to state 53
  1:   On '(' to state 40
  2:   On variable to state 41
  3:   On constant to state 42
  4:   On NAME to state 34
  5:   On INTEGER_NUMBER to state 43


State 41:
32: conditional_exp -> variable  . 
  Reduce by 32: conditional_exp -> variable  . 


State 42:
33: conditional_exp -> constant  . 
  Reduce by 33: conditional_exp -> constant  . 


State 43:
35: constant -> INTEGER_NUMBER  . 
  Reduce by 35: constant -> INTEGER_NUMBER  . 


State 44:
24: GOTO_exp -> GOTO BBNUM ';'  . 
  Reduce by 24: GOTO_exp -> GOTO BBNUM ';'  . 


State 45:
22: assignment_statement -> variable ASSIGN conditional_exp  . ';' 
26: conditional_exp -> conditional_exp  . OP2 conditional_exp 
27: conditional_exp -> conditional_exp  . OP3 conditional_exp 
28: conditional_exp -> conditional_exp  . OP4 conditional_exp 
29: conditional_exp -> conditional_exp  . OP5 conditional_exp 
30: conditional_exp -> conditional_exp  . OP6 conditional_exp 
31: conditional_exp -> conditional_exp  . OP7 conditional_exp 
  0:   On ';' to state 54
  1:   On OP2 to state 47
  2:   On OP3 to state 48
  3:   On OP4 to state 49
  4:   On OP5 to state 50
  5:   On OP6 to state 51
  6:   On OP7 to state 52


State 46:
23: IFELSE -> IF '(' conditional_exp ')'  . GOTO_exp ELSE GOTO_exp 
  0:   On GOTO_exp to state 55
  1:   On GOTO to state 32


State 47:
26: conditional_exp -> conditional_exp OP2  . conditional_exp 
  0:   On conditional_exp to state 56
  1:   On '(' to state 40
  2:   On variable to state 41
  3:   On constant to state 42
  4:   On NAME to state 34
  5:   On INTEGER_NUMBER to state 43


State 48:
27: conditional_exp -> conditional_exp OP3  . conditional_exp 
  0:   On conditional_exp to state 57
  1:   On '(' to state 40
  2:   On variable to state 41
  3:   On constant to state 42
  4:   On NAME to state 34
  5:   On INTEGER_NUMBER to state 43


State 49:
28: conditional_exp -> conditional_exp OP4  . conditional_exp 
  0:   On conditional_exp to state 58
  1:   On '(' to state 40
  2:   On variable to state 41
  3:   On constant to state 42
  4:   On NAME to state 34
  5:   On INTEGER_NUMBER to state 43


State 50:
29: conditional_exp -> conditional_exp OP5  . conditional_exp 
  0:   On conditional_exp to state 59
  1:   On '(' to state 40
  2:   On variable to state 41
  3:   On constant to state 42
  4:   On NAME to state 34
  5:   On INTEGER_NUMBER to state 43


State 51:
30: conditional_exp -> conditional_exp OP6  . conditional_exp 
  0:   On conditional_exp to state 60
  1:   On '(' to state 40
  2:   On variable to state 41
  3:   On constant to state 42
  4:   On NAME to state 34
  5:   On INTEGER_NUMBER to state 43


State 52:
31: conditional_exp -> conditional_exp OP7  . conditional_exp 
  0:   On conditional_exp to state 61
  1:   On '(' to state 40
  2:   On variable to state 41
  3:   On constant to state 42
  4:   On NAME to state 34
  5:   On INTEGER_NUMBER to state 43


State 53:
25: conditional_exp -> '(' conditional_exp  . ')' 
26: conditional_exp -> conditional_exp  . OP2 conditional_exp 
27: conditional_exp -> conditional_exp  . OP3 conditional_exp 
28: conditional_exp -> conditional_exp  . OP4 conditional_exp 
29: conditional_exp -> conditional_exp  . OP5 conditional_exp 
30: conditional_exp -> conditional_exp  . OP6 conditional_exp 
31: conditional_exp -> conditional_exp  . OP7 conditional_exp 
  0:   On ')' to state 62
  1:   On OP2 to state 47
  2:   On OP3 to state 48
  3:   On OP4 to state 49
  4:   On OP5 to state 50
  5:   On OP6 to state 51
  6:   On OP7 to state 52


State 54:
22: assignment_statement -> variable ASSIGN conditional_exp ';'  . 
  Reduce by 22: assignment_statement -> variable ASSIGN conditional_exp ';'  . 


State 55:
23: IFELSE -> IF '(' conditional_exp ')' GOTO_exp  . ELSE GOTO_exp 
  0:   On ELSE to state 63


State 56:
26: conditional_exp -> conditional_exp OP2 conditional_exp  . 
26: conditional_exp -> conditional_exp  . OP2 conditional_exp 
27: conditional_exp -> conditional_exp  . OP3 conditional_exp 
28: conditional_exp -> conditional_exp  . OP4 conditional_exp 
29: conditional_exp -> conditional_exp  . OP5 conditional_exp 
30: conditional_exp -> conditional_exp  . OP6 conditional_exp 
31: conditional_exp -> conditional_exp  . OP7 conditional_exp 
  0 (removed by precedence):   On OP2 to state 47
  1 (removed by precedence):   On OP3 to state 48
  2:   On OP4 to state 49
  3:   On OP5 to state 50
  4:   On OP6 to state 51
  5:   On OP7 to state 52
  Reduce by 26: conditional_exp -> conditional_exp OP2 conditional_exp  . 


State 57:
27: conditional_exp -> conditional_exp OP3 conditional_exp  . 
26: conditional_exp -> conditional_exp  . OP2 conditional_exp 
27: conditional_exp -> conditional_exp  . OP3 conditional_exp 
28: conditional_exp -> conditional_exp  . OP4 conditional_exp 
29: conditional_exp -> conditional_exp  . OP5 conditional_exp 
30: conditional_exp -> conditional_exp  . OP6 conditional_exp 
31: conditional_exp -> conditional_exp  . OP7 conditional_exp 
  0 (removed by precedence):   On OP2 to state 47
  1 (removed by precedence):   On OP3 to state 48
  2:   On OP4 to state 49
  3:   On OP5 to state 50
  4:   On OP6 to state 51
  5:   On OP7 to state 52
  Reduce by 27: conditional_exp -> conditional_exp OP3 conditional_exp  . 


State 58:
28: conditional_exp -> conditional_exp OP4 conditional_exp  . 
26: conditional_exp -> conditional_exp  . OP2 conditional_exp 
27: conditional_exp -> conditional_exp  . OP3 conditional_exp 
28: conditional_exp -> conditional_exp  . OP4 conditional_exp 
29: conditional_exp -> conditional_exp  . OP5 conditional_exp 
30: conditional_exp -> conditional_exp  . OP6 conditional_exp 
31: conditional_exp -> conditional_exp  . OP7 conditional_exp 
  0 (removed by precedence):   On OP2 to state 47
  1 (removed by precedence):   On OP3 to state 48
  2 (removed by precedence):   On OP4 to state 49
  3 (removed by precedence):   On OP5 to state 50
  4 (removed by precedence):   On OP6 to state 51
  5 (removed by precedence):   On OP7 to state 52
  Reduce by 28: conditional_exp -> conditional_exp OP4 conditional_exp  . 


State 59:
29: conditional_exp -> conditional_exp OP5 conditional_exp  . 
26: conditional_exp -> conditional_exp  . OP2 conditional_exp 
27: conditional_exp -> conditional_exp  . OP3 conditional_exp 
28: conditional_exp -> conditional_exp  . OP4 conditional_exp 
29: conditional_exp -> conditional_exp  . OP5 conditional_exp 
30: conditional_exp -> conditional_exp  . OP6 conditional_exp 
31: conditional_exp -> conditional_exp  . OP7 conditional_exp 
  0 (removed by precedence):   On OP2 to state 47
  1 (removed by precedence):   On OP3 to state 48
  2 (removed by precedence):   On OP4 to state 49
  3 (removed by precedence):   On OP5 to state 50
  4 (removed by precedence):   On OP6 to state 51
  5 (removed by precedence):   On OP7 to state 52
  Reduce by 29: conditional_exp -> conditional_exp OP5 conditional_exp  . 


State 60:
30: conditional_exp -> conditional_exp OP6 conditional_exp  . 
26: conditional_exp -> conditional_exp  . OP2 conditional_exp 
27: conditional_exp -> conditional_exp  . OP3 conditional_exp 
28: conditional_exp -> conditional_exp  . OP4 conditional_exp 
29: conditional_exp -> conditional_exp  . OP5 conditional_exp 
30: conditional_exp -> conditional_exp  . OP6 conditional_exp 
31: conditional_exp -> conditional_exp  . OP7 conditional_exp 
  0 (removed by precedence):   On OP2 to state 47
  1 (removed by precedence):   On OP3 to state 48
  2 (removed by precedence):   On OP4 to state 49
  3 (removed by precedence):   On OP5 to state 50
  4 (removed by precedence):   On OP6 to state 51
  5 (removed by precedence):   On OP7 to state 52
  Reduce by 30: conditional_exp -> conditional_exp OP6 conditional_exp  . 


State 61:
31: conditional_exp -> conditional_exp OP7 conditional_exp  . 
26: conditional_exp -> conditional_exp  . OP2 conditional_exp 
27: conditional_exp -> conditional_exp  . OP3 conditional_exp 
28: conditional_exp -> conditional_exp  . OP4 conditional_exp 
29: conditional_exp -> conditional_exp  . OP5 conditional_exp 
30: conditional_exp -> conditional_exp  . OP6 conditional_exp 
31: conditional_exp -> conditional_exp  . OP7 conditional_exp 
  0 (removed by precedence):   On OP2 to state 47
  1 (removed by precedence):   On OP3 to state 48
  2 (removed by precedence):   On OP4 to state 49
  3 (removed by precedence):   On OP5 to state 50
  4 (removed by precedence):   On OP6 to state 51
  5 (removed by precedence):   On OP7 to state 52
  Reduce by 31: conditional_exp -> conditional_exp OP7 conditional_exp  . 


State 62:
25: conditional_exp -> '(' conditional_exp ')'  . 
  Reduce by 25: conditional_exp -> '(' conditional_exp ')'  . 


State 63:
23: IFELSE -> IF '(' conditional_exp ')' GOTO_exp ELSE  . GOTO_exp 
  0:   On GOTO_exp to state 64
  1:   On GOTO to state 32


State 64:
23: IFELSE -> IF '(' conditional_exp ')' GOTO_exp ELSE GOTO_exp  . 
  Reduce by 23: IFELSE -> IF '(' conditional_exp ')' GOTO_exp ELSE GOTO_exp  . 



