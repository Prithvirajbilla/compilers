
Production Rules
(rule precedences determined from %prec or 1st terminal between parentheses):
1: program ->  optional_declaration_list procedure_definition
2: optional_declaration_list ->  <empty>
3: optional_declaration_list ->  variable_declaration_list
4: procedure_definition (NAME) ->  NAME '(' ')' #0001 '{' optional_variable_declaration_list #0002 basic_block_list '}'
5: #0001 ->  <empty>
6: #0002 ->  <empty>
7: optional_variable_declaration_list ->  <empty>
8: optional_variable_declaration_list ->  variable_declaration_list
9: variable_declaration_list ->  variable_declaration
10: variable_declaration_list ->  variable_declaration_list variable_declaration
11: variable_declaration (';') ->  declaration ';'
12: declaration (INTEGER) ->  INTEGER NAME
13: declaration (FLOAT) ->  FLOAT NAME
14: declaration (DOUBLE) ->  DOUBLE NAME
15: basic_block_list ->  basic_block_list basic_block
16: basic_block_list ->  basic_block
17: basic_block (BBNUM) ->  BBNUM ':' executable_statement_list
18: executable_statement_list ->  assignment_statement_list
19: executable_statement_list (RETURN) ->  assignment_statement_list RETURN ';'
20: executable_statement_list ->  assignment_statement_list IFELSE
21: executable_statement_list ->  assignment_statement_list GOTO_exp
22: assignment_statement_list ->  <empty>
23: assignment_statement_list ->  assignment_statement_list assignment_statement
24: assignment_statement (ASSIGN) ->  variable ASSIGN conditional_exp ';'
25: IFELSE (IF) ->  IF '(' conditional_exp ')' GOTO_exp ELSE GOTO_exp
26: GOTO_exp (GOTO) ->  GOTO BBNUM ';'
27: conditional_exp (OP2) ->  conditional_exp OP2 conditional_exp
28: conditional_exp (OP3) ->  conditional_exp OP3 conditional_exp
29: conditional_exp (OP4) ->  conditional_exp OP4 conditional_exp
30: conditional_exp (OP5) ->  conditional_exp OP5 conditional_exp
31: conditional_exp (OP6) ->  conditional_exp OP6 conditional_exp
32: conditional_exp (OP7) ->  conditional_exp OP7 conditional_exp
33: conditional_exp ('+') ->  conditional_exp '+' conditional_exp
34: conditional_exp ('-') ->  conditional_exp '-' conditional_exp
35: conditional_exp ('*') ->  conditional_exp '*' conditional_exp
36: conditional_exp ('/') ->  conditional_exp '/' conditional_exp
37: conditional_exp ->  unary_exp
38: unary_exp ('-') ->  '-' unary_exp
39: unary_exp ->  variable
40: unary_exp ->  constant
41: unary_exp ('(') ->  '(' FLOAT ')' unary_exp
42: unary_exp ('(') ->  '(' INTEGER ')' unary_exp
43: unary_exp ('(') ->  '(' DOUBLE ')' unary_exp
44: unary_exp ('(') ->  '(' conditional_exp ')'
45: variable (NAME) ->  NAME
46: constant (INTEGER_NUMBER) ->  INTEGER_NUMBER
47: constant (FLOAT_NUMBER) ->  FLOAT_NUMBER
48: program_$ ->  program


Symbolic Terminal tokens:
       error
       EOF
   257: INTEGER_NUMBER
   258: BBNUM
   259: FLOAT_NUMBER
   260: NAME
   261: RETURN
   262: INTEGER
   263: FLOAT
   264: DOUBLE
   265: ASSIGN
   266: IF
   267: ELSE
   268: GOTO
   269: OP2
   270: OP3
   271: OP7
   272: OP5
   273: OP6
   274: OP4
    45: '-'
    43: '+'
    47: '/'
    42: '*'
    40: '('
    41: ')'
   123: '{'
   125: '}'
    59: ';'
    58: ':'


Grammar States: 
State 0:
48: program_$ ->  . program 
  0:   On program to state 1
  1:   On optional_declaration_list to state 2
  2:   On variable_declaration_list to state 3
  3:   On variable_declaration to state 4
  4:   On declaration to state 5
  5:   On INTEGER to state 6
  6:   On FLOAT to state 7
  7:   On DOUBLE to state 8
  Reduce by 2: optional_declaration_list ->  . 


State 1:
48: program_$ -> program  . 


State 2:
1: program -> optional_declaration_list  . procedure_definition 
  0:   On procedure_definition to state 9
  1:   On NAME to state 10


State 3:
3: optional_declaration_list -> variable_declaration_list  . 
10: variable_declaration_list -> variable_declaration_list  . variable_declaration 
  0:   On variable_declaration to state 11
  1:   On declaration to state 5
  2:   On INTEGER to state 6
  3:   On FLOAT to state 7
  4:   On DOUBLE to state 8
  Reduce by 3: optional_declaration_list -> variable_declaration_list  . 


State 4:
9: variable_declaration_list -> variable_declaration  . 
  Reduce by 9: variable_declaration_list -> variable_declaration  . 


State 5:
11: variable_declaration -> declaration  . ';' 
  0:   On ';' to state 12


State 6:
12: declaration -> INTEGER  . NAME 
  0:   On NAME to state 13


State 7:
13: declaration -> FLOAT  . NAME 
  0:   On NAME to state 14


State 8:
14: declaration -> DOUBLE  . NAME 
  0:   On NAME to state 15


State 9:
1: program -> optional_declaration_list procedure_definition  . 
  Reduce by 1: program -> optional_declaration_list procedure_definition  . 


State 10:
4: procedure_definition -> NAME  . '(' ')' #0001 '{' optional_variable_declaration_list #0002 basic_block_list '}' 
  0:   On '(' to state 16


State 11:
10: variable_declaration_list -> variable_declaration_list variable_declaration  . 
  Reduce by 10: variable_declaration_list -> variable_declaration_list variable_declaration  . 


State 12:
11: variable_declaration -> declaration ';'  . 
  Reduce by 11: variable_declaration -> declaration ';'  . 


State 13:
12: declaration -> INTEGER NAME  . 
  Reduce by 12: declaration -> INTEGER NAME  . 


State 14:
13: declaration -> FLOAT NAME  . 
  Reduce by 13: declaration -> FLOAT NAME  . 


State 15:
14: declaration -> DOUBLE NAME  . 
  Reduce by 14: declaration -> DOUBLE NAME  . 


State 16:
4: procedure_definition -> NAME '('  . ')' #0001 '{' optional_variable_declaration_list #0002 basic_block_list '}' 
  0:   On ')' to state 17


State 17:
4: procedure_definition -> NAME '(' ')'  . #0001 '{' optional_variable_declaration_list #0002 basic_block_list '}' 
  0:   On #0001 to state 18
  Reduce by 5: #0001 ->  . 


State 18:
4: procedure_definition -> NAME '(' ')' #0001  . '{' optional_variable_declaration_list #0002 basic_block_list '}' 
  0:   On '{' to state 19


State 19:
4: procedure_definition -> NAME '(' ')' #0001 '{'  . optional_variable_declaration_list #0002 basic_block_list '}' 
  0:   On optional_variable_declaration_list to state 20
  1:   On variable_declaration_list to state 21
  2:   On variable_declaration to state 4
  3:   On declaration to state 5
  4:   On INTEGER to state 6
  5:   On FLOAT to state 7
  6:   On DOUBLE to state 8
  Reduce by 7: optional_variable_declaration_list ->  . 


State 20:
4: procedure_definition -> NAME '(' ')' #0001 '{' optional_variable_declaration_list  . #0002 basic_block_list '}' 
  0:   On #0002 to state 22
  Reduce by 6: #0002 ->  . 


State 21:
8: optional_variable_declaration_list -> variable_declaration_list  . 
10: variable_declaration_list -> variable_declaration_list  . variable_declaration 
  0:   On variable_declaration to state 11
  1:   On declaration to state 5
  2:   On INTEGER to state 6
  3:   On FLOAT to state 7
  4:   On DOUBLE to state 8
  Reduce by 8: optional_variable_declaration_list -> variable_declaration_list  . 


State 22:
4: procedure_definition -> NAME '(' ')' #0001 '{' optional_variable_declaration_list #0002  . basic_block_list '}' 
  0:   On basic_block_list to state 23
  1:   On basic_block to state 24
  2:   On BBNUM to state 25


State 23:
4: procedure_definition -> NAME '(' ')' #0001 '{' optional_variable_declaration_list #0002 basic_block_list  . '}' 
15: basic_block_list -> basic_block_list  . basic_block 
  0:   On '}' to state 26
  1:   On basic_block to state 27
  2:   On BBNUM to state 25


State 24:
16: basic_block_list -> basic_block  . 
  Reduce by 16: basic_block_list -> basic_block  . 


State 25:
17: basic_block -> BBNUM  . ':' executable_statement_list 
  0:   On ':' to state 28


State 26:
4: procedure_definition -> NAME '(' ')' #0001 '{' optional_variable_declaration_list #0002 basic_block_list '}'  . 
  Reduce by 4: procedure_definition -> NAME '(' ')' #0001 '{' optional_variable_declaration_list #0002 basic_block_list '}'  . 


State 27:
15: basic_block_list -> basic_block_list basic_block  . 
  Reduce by 15: basic_block_list -> basic_block_list basic_block  . 


State 28:
17: basic_block -> BBNUM ':'  . executable_statement_list 
  0:   On executable_statement_list to state 29
  1:   On assignment_statement_list to state 30
  Reduce by 22: assignment_statement_list ->  . 


State 29:
17: basic_block -> BBNUM ':' executable_statement_list  . 
  Reduce by 17: basic_block -> BBNUM ':' executable_statement_list  . 


State 30:
18: executable_statement_list -> assignment_statement_list  . 
19: executable_statement_list -> assignment_statement_list  . RETURN ';' 
20: executable_statement_list -> assignment_statement_list  . IFELSE 
21: executable_statement_list -> assignment_statement_list  . GOTO_exp 
23: assignment_statement_list -> assignment_statement_list  . assignment_statement 
  0:   On RETURN to state 31
  1:   On IFELSE to state 32
  2:   On GOTO_exp to state 33
  3:   On assignment_statement to state 34
  4:   On IF to state 35
  5:   On GOTO to state 36
  6:   On variable to state 37
  7:   On NAME to state 38
  Reduce by 18: executable_statement_list -> assignment_statement_list  . 


State 31:
19: executable_statement_list -> assignment_statement_list RETURN  . ';' 
  0:   On ';' to state 39


State 32:
20: executable_statement_list -> assignment_statement_list IFELSE  . 
  Reduce by 20: executable_statement_list -> assignment_statement_list IFELSE  . 


State 33:
21: executable_statement_list -> assignment_statement_list GOTO_exp  . 
  Reduce by 21: executable_statement_list -> assignment_statement_list GOTO_exp  . 


State 34:
23: assignment_statement_list -> assignment_statement_list assignment_statement  . 
  Reduce by 23: assignment_statement_list -> assignment_statement_list assignment_statement  . 


State 35:
25: IFELSE -> IF  . '(' conditional_exp ')' GOTO_exp ELSE GOTO_exp 
  0:   On '(' to state 40


State 36:
26: GOTO_exp -> GOTO  . BBNUM ';' 
  0:   On BBNUM to state 41


State 37:
24: assignment_statement -> variable  . ASSIGN conditional_exp ';' 
  0:   On ASSIGN to state 42


State 38:
45: variable -> NAME  . 
  Reduce by 45: variable -> NAME  . 


State 39:
19: executable_statement_list -> assignment_statement_list RETURN ';'  . 
  Reduce by 19: executable_statement_list -> assignment_statement_list RETURN ';'  . 


State 40:
25: IFELSE -> IF '('  . conditional_exp ')' GOTO_exp ELSE GOTO_exp 
  0:   On conditional_exp to state 43
  1:   On unary_exp to state 44
  2:   On '-' to state 45
  3:   On variable to state 46
  4:   On constant to state 47
  5:   On '(' to state 48
  6:   On NAME to state 38
  7:   On INTEGER_NUMBER to state 49
  8:   On FLOAT_NUMBER to state 50


State 41:
26: GOTO_exp -> GOTO BBNUM  . ';' 
  0:   On ';' to state 51


State 42:
24: assignment_statement -> variable ASSIGN  . conditional_exp ';' 
  0:   On conditional_exp to state 52
  1:   On unary_exp to state 44
  2:   On '-' to state 45
  3:   On variable to state 46
  4:   On constant to state 47
  5:   On '(' to state 48
  6:   On NAME to state 38
  7:   On INTEGER_NUMBER to state 49
  8:   On FLOAT_NUMBER to state 50


State 43:
25: IFELSE -> IF '(' conditional_exp  . ')' GOTO_exp ELSE GOTO_exp 
27: conditional_exp -> conditional_exp  . OP2 conditional_exp 
28: conditional_exp -> conditional_exp  . OP3 conditional_exp 
29: conditional_exp -> conditional_exp  . OP4 conditional_exp 
30: conditional_exp -> conditional_exp  . OP5 conditional_exp 
31: conditional_exp -> conditional_exp  . OP6 conditional_exp 
32: conditional_exp -> conditional_exp  . OP7 conditional_exp 
33: conditional_exp -> conditional_exp  . '+' conditional_exp 
34: conditional_exp -> conditional_exp  . '-' conditional_exp 
35: conditional_exp -> conditional_exp  . '*' conditional_exp 
36: conditional_exp -> conditional_exp  . '/' conditional_exp 
  0:   On ')' to state 53
  1:   On OP2 to state 54
  2:   On OP3 to state 55
  3:   On OP4 to state 56
  4:   On OP5 to state 57
  5:   On OP6 to state 58
  6:   On OP7 to state 59
  7:   On '+' to state 60
  8:   On '-' to state 61
  9:   On '*' to state 62
  10:   On '/' to state 63


State 44:
37: conditional_exp -> unary_exp  . 
  Reduce by 37: conditional_exp -> unary_exp  . 


State 45:
38: unary_exp -> '-'  . unary_exp 
  0:   On unary_exp to state 64
  1:   On '-' to state 45
  2:   On variable to state 46
  3:   On constant to state 47
  4:   On '(' to state 48
  5:   On NAME to state 38
  6:   On INTEGER_NUMBER to state 49
  7:   On FLOAT_NUMBER to state 50


State 46:
39: unary_exp -> variable  . 
  Reduce by 39: unary_exp -> variable  . 


State 47:
40: unary_exp -> constant  . 
  Reduce by 40: unary_exp -> constant  . 


State 48:
41: unary_exp -> '('  . FLOAT ')' unary_exp 
42: unary_exp -> '('  . INTEGER ')' unary_exp 
43: unary_exp -> '('  . DOUBLE ')' unary_exp 
44: unary_exp -> '('  . conditional_exp ')' 
  0:   On FLOAT to state 65
  1:   On INTEGER to state 66
  2:   On DOUBLE to state 67
  3:   On conditional_exp to state 68
  4:   On unary_exp to state 44
  5:   On '-' to state 45
  6:   On variable to state 46
  7:   On constant to state 47
  8:   On '(' to state 48
  9:   On NAME to state 38
  10:   On INTEGER_NUMBER to state 49
  11:   On FLOAT_NUMBER to state 50


State 49:
46: constant -> INTEGER_NUMBER  . 
  Reduce by 46: constant -> INTEGER_NUMBER  . 


State 50:
47: constant -> FLOAT_NUMBER  . 
  Reduce by 47: constant -> FLOAT_NUMBER  . 


State 51:
26: GOTO_exp -> GOTO BBNUM ';'  . 
  Reduce by 26: GOTO_exp -> GOTO BBNUM ';'  . 


State 52:
24: assignment_statement -> variable ASSIGN conditional_exp  . ';' 
27: conditional_exp -> conditional_exp  . OP2 conditional_exp 
28: conditional_exp -> conditional_exp  . OP3 conditional_exp 
29: conditional_exp -> conditional_exp  . OP4 conditional_exp 
30: conditional_exp -> conditional_exp  . OP5 conditional_exp 
31: conditional_exp -> conditional_exp  . OP6 conditional_exp 
32: conditional_exp -> conditional_exp  . OP7 conditional_exp 
33: conditional_exp -> conditional_exp  . '+' conditional_exp 
34: conditional_exp -> conditional_exp  . '-' conditional_exp 
35: conditional_exp -> conditional_exp  . '*' conditional_exp 
36: conditional_exp -> conditional_exp  . '/' conditional_exp 
  0:   On ';' to state 69
  1:   On OP2 to state 54
  2:   On OP3 to state 55
  3:   On OP4 to state 56
  4:   On OP5 to state 57
  5:   On OP6 to state 58
  6:   On OP7 to state 59
  7:   On '+' to state 60
  8:   On '-' to state 61
  9:   On '*' to state 62
  10:   On '/' to state 63


State 53:
25: IFELSE -> IF '(' conditional_exp ')'  . GOTO_exp ELSE GOTO_exp 
  0:   On GOTO_exp to state 70
  1:   On GOTO to state 36


State 54:
27: conditional_exp -> conditional_exp OP2  . conditional_exp 
  0:   On conditional_exp to state 71
  1:   On unary_exp to state 44
  2:   On '-' to state 45
  3:   On variable to state 46
  4:   On constant to state 47
  5:   On '(' to state 48
  6:   On NAME to state 38
  7:   On INTEGER_NUMBER to state 49
  8:   On FLOAT_NUMBER to state 50


State 55:
28: conditional_exp -> conditional_exp OP3  . conditional_exp 
  0:   On conditional_exp to state 72
  1:   On unary_exp to state 44
  2:   On '-' to state 45
  3:   On variable to state 46
  4:   On constant to state 47
  5:   On '(' to state 48
  6:   On NAME to state 38
  7:   On INTEGER_NUMBER to state 49
  8:   On FLOAT_NUMBER to state 50


State 56:
29: conditional_exp -> conditional_exp OP4  . conditional_exp 
  0:   On conditional_exp to state 73
  1:   On unary_exp to state 44
  2:   On '-' to state 45
  3:   On variable to state 46
  4:   On constant to state 47
  5:   On '(' to state 48
  6:   On NAME to state 38
  7:   On INTEGER_NUMBER to state 49
  8:   On FLOAT_NUMBER to state 50


State 57:
30: conditional_exp -> conditional_exp OP5  . conditional_exp 
  0:   On conditional_exp to state 74
  1:   On unary_exp to state 44
  2:   On '-' to state 45
  3:   On variable to state 46
  4:   On constant to state 47
  5:   On '(' to state 48
  6:   On NAME to state 38
  7:   On INTEGER_NUMBER to state 49
  8:   On FLOAT_NUMBER to state 50


State 58:
31: conditional_exp -> conditional_exp OP6  . conditional_exp 
  0:   On conditional_exp to state 75
  1:   On unary_exp to state 44
  2:   On '-' to state 45
  3:   On variable to state 46
  4:   On constant to state 47
  5:   On '(' to state 48
  6:   On NAME to state 38
  7:   On INTEGER_NUMBER to state 49
  8:   On FLOAT_NUMBER to state 50


State 59:
32: conditional_exp -> conditional_exp OP7  . conditional_exp 
  0:   On conditional_exp to state 76
  1:   On unary_exp to state 44
  2:   On '-' to state 45
  3:   On variable to state 46
  4:   On constant to state 47
  5:   On '(' to state 48
  6:   On NAME to state 38
  7:   On INTEGER_NUMBER to state 49
  8:   On FLOAT_NUMBER to state 50


State 60:
33: conditional_exp -> conditional_exp '+'  . conditional_exp 
  0:   On conditional_exp to state 77
  1:   On unary_exp to state 44
  2:   On '-' to state 45
  3:   On variable to state 46
  4:   On constant to state 47
  5:   On '(' to state 48
  6:   On NAME to state 38
  7:   On INTEGER_NUMBER to state 49
  8:   On FLOAT_NUMBER to state 50


State 61:
34: conditional_exp -> conditional_exp '-'  . conditional_exp 
  0:   On conditional_exp to state 78
  1:   On unary_exp to state 44
  2:   On '-' to state 45
  3:   On variable to state 46
  4:   On constant to state 47
  5:   On '(' to state 48
  6:   On NAME to state 38
  7:   On INTEGER_NUMBER to state 49
  8:   On FLOAT_NUMBER to state 50


State 62:
35: conditional_exp -> conditional_exp '*'  . conditional_exp 
  0:   On conditional_exp to state 79
  1:   On unary_exp to state 44
  2:   On '-' to state 45
  3:   On variable to state 46
  4:   On constant to state 47
  5:   On '(' to state 48
  6:   On NAME to state 38
  7:   On INTEGER_NUMBER to state 49
  8:   On FLOAT_NUMBER to state 50


State 63:
36: conditional_exp -> conditional_exp '/'  . conditional_exp 
  0:   On conditional_exp to state 80
  1:   On unary_exp to state 44
  2:   On '-' to state 45
  3:   On variable to state 46
  4:   On constant to state 47
  5:   On '(' to state 48
  6:   On NAME to state 38
  7:   On INTEGER_NUMBER to state 49
  8:   On FLOAT_NUMBER to state 50


State 64:
38: unary_exp -> '-' unary_exp  . 
  Reduce by 38: unary_exp -> '-' unary_exp  . 


State 65:
41: unary_exp -> '(' FLOAT  . ')' unary_exp 
  0:   On ')' to state 81


State 66:
42: unary_exp -> '(' INTEGER  . ')' unary_exp 
  0:   On ')' to state 82


State 67:
43: unary_exp -> '(' DOUBLE  . ')' unary_exp 
  0:   On ')' to state 83


State 68:
44: unary_exp -> '(' conditional_exp  . ')' 
27: conditional_exp -> conditional_exp  . OP2 conditional_exp 
28: conditional_exp -> conditional_exp  . OP3 conditional_exp 
29: conditional_exp -> conditional_exp  . OP4 conditional_exp 
30: conditional_exp -> conditional_exp  . OP5 conditional_exp 
31: conditional_exp -> conditional_exp  . OP6 conditional_exp 
32: conditional_exp -> conditional_exp  . OP7 conditional_exp 
33: conditional_exp -> conditional_exp  . '+' conditional_exp 
34: conditional_exp -> conditional_exp  . '-' conditional_exp 
35: conditional_exp -> conditional_exp  . '*' conditional_exp 
36: conditional_exp -> conditional_exp  . '/' conditional_exp 
  0:   On ')' to state 84
  1:   On OP2 to state 54
  2:   On OP3 to state 55
  3:   On OP4 to state 56
  4:   On OP5 to state 57
  5:   On OP6 to state 58
  6:   On OP7 to state 59
  7:   On '+' to state 60
  8:   On '-' to state 61
  9:   On '*' to state 62
  10:   On '/' to state 63


State 69:
24: assignment_statement -> variable ASSIGN conditional_exp ';'  . 
  Reduce by 24: assignment_statement -> variable ASSIGN conditional_exp ';'  . 


State 70:
25: IFELSE -> IF '(' conditional_exp ')' GOTO_exp  . ELSE GOTO_exp 
  0:   On ELSE to state 85


State 71:
27: conditional_exp -> conditional_exp OP2 conditional_exp  . 
27: conditional_exp -> conditional_exp  . OP2 conditional_exp 
28: conditional_exp -> conditional_exp  . OP3 conditional_exp 
29: conditional_exp -> conditional_exp  . OP4 conditional_exp 
30: conditional_exp -> conditional_exp  . OP5 conditional_exp 
31: conditional_exp -> conditional_exp  . OP6 conditional_exp 
32: conditional_exp -> conditional_exp  . OP7 conditional_exp 
33: conditional_exp -> conditional_exp  . '+' conditional_exp 
34: conditional_exp -> conditional_exp  . '-' conditional_exp 
35: conditional_exp -> conditional_exp  . '*' conditional_exp 
36: conditional_exp -> conditional_exp  . '/' conditional_exp 
  0 (removed by precedence):   On OP2 to state 54
  1 (removed by precedence):   On OP3 to state 55
  2:   On OP4 to state 56
  3:   On OP5 to state 57
  4:   On OP6 to state 58
  5:   On OP7 to state 59
  6:   On '+' to state 60
  7:   On '-' to state 61
  8:   On '*' to state 62
  9:   On '/' to state 63
  Reduce by 27: conditional_exp -> conditional_exp OP2 conditional_exp  . 


State 72:
28: conditional_exp -> conditional_exp OP3 conditional_exp  . 
27: conditional_exp -> conditional_exp  . OP2 conditional_exp 
28: conditional_exp -> conditional_exp  . OP3 conditional_exp 
29: conditional_exp -> conditional_exp  . OP4 conditional_exp 
30: conditional_exp -> conditional_exp  . OP5 conditional_exp 
31: conditional_exp -> conditional_exp  . OP6 conditional_exp 
32: conditional_exp -> conditional_exp  . OP7 conditional_exp 
33: conditional_exp -> conditional_exp  . '+' conditional_exp 
34: conditional_exp -> conditional_exp  . '-' conditional_exp 
35: conditional_exp -> conditional_exp  . '*' conditional_exp 
36: conditional_exp -> conditional_exp  . '/' conditional_exp 
  0 (removed by precedence):   On OP2 to state 54
  1 (removed by precedence):   On OP3 to state 55
  2:   On OP4 to state 56
  3:   On OP5 to state 57
  4:   On OP6 to state 58
  5:   On OP7 to state 59
  6:   On '+' to state 60
  7:   On '-' to state 61
  8:   On '*' to state 62
  9:   On '/' to state 63
  Reduce by 28: conditional_exp -> conditional_exp OP3 conditional_exp  . 


State 73:
29: conditional_exp -> conditional_exp OP4 conditional_exp  . 
27: conditional_exp -> conditional_exp  . OP2 conditional_exp 
28: conditional_exp -> conditional_exp  . OP3 conditional_exp 
29: conditional_exp -> conditional_exp  . OP4 conditional_exp 
30: conditional_exp -> conditional_exp  . OP5 conditional_exp 
31: conditional_exp -> conditional_exp  . OP6 conditional_exp 
32: conditional_exp -> conditional_exp  . OP7 conditional_exp 
33: conditional_exp -> conditional_exp  . '+' conditional_exp 
34: conditional_exp -> conditional_exp  . '-' conditional_exp 
35: conditional_exp -> conditional_exp  . '*' conditional_exp 
36: conditional_exp -> conditional_exp  . '/' conditional_exp 
  0 (removed by precedence):   On OP2 to state 54
  1 (removed by precedence):   On OP3 to state 55
  2 (removed by precedence):   On OP4 to state 56
  3 (removed by precedence):   On OP5 to state 57
  4 (removed by precedence):   On OP6 to state 58
  5 (removed by precedence):   On OP7 to state 59
  6:   On '+' to state 60
  7:   On '-' to state 61
  8:   On '*' to state 62
  9:   On '/' to state 63
  Reduce by 29: conditional_exp -> conditional_exp OP4 conditional_exp  . 


State 74:
30: conditional_exp -> conditional_exp OP5 conditional_exp  . 
27: conditional_exp -> conditional_exp  . OP2 conditional_exp 
28: conditional_exp -> conditional_exp  . OP3 conditional_exp 
29: conditional_exp -> conditional_exp  . OP4 conditional_exp 
30: conditional_exp -> conditional_exp  . OP5 conditional_exp 
31: conditional_exp -> conditional_exp  . OP6 conditional_exp 
32: conditional_exp -> conditional_exp  . OP7 conditional_exp 
33: conditional_exp -> conditional_exp  . '+' conditional_exp 
34: conditional_exp -> conditional_exp  . '-' conditional_exp 
35: conditional_exp -> conditional_exp  . '*' conditional_exp 
36: conditional_exp -> conditional_exp  . '/' conditional_exp 
  0 (removed by precedence):   On OP2 to state 54
  1 (removed by precedence):   On OP3 to state 55
  2 (removed by precedence):   On OP4 to state 56
  3 (removed by precedence):   On OP5 to state 57
  4 (removed by precedence):   On OP6 to state 58
  5 (removed by precedence):   On OP7 to state 59
  6:   On '+' to state 60
  7:   On '-' to state 61
  8:   On '*' to state 62
  9:   On '/' to state 63
  Reduce by 30: conditional_exp -> conditional_exp OP5 conditional_exp  . 


State 75:
31: conditional_exp -> conditional_exp OP6 conditional_exp  . 
27: conditional_exp -> conditional_exp  . OP2 conditional_exp 
28: conditional_exp -> conditional_exp  . OP3 conditional_exp 
29: conditional_exp -> conditional_exp  . OP4 conditional_exp 
30: conditional_exp -> conditional_exp  . OP5 conditional_exp 
31: conditional_exp -> conditional_exp  . OP6 conditional_exp 
32: conditional_exp -> conditional_exp  . OP7 conditional_exp 
33: conditional_exp -> conditional_exp  . '+' conditional_exp 
34: conditional_exp -> conditional_exp  . '-' conditional_exp 
35: conditional_exp -> conditional_exp  . '*' conditional_exp 
36: conditional_exp -> conditional_exp  . '/' conditional_exp 
  0 (removed by precedence):   On OP2 to state 54
  1 (removed by precedence):   On OP3 to state 55
  2 (removed by precedence):   On OP4 to state 56
  3 (removed by precedence):   On OP5 to state 57
  4 (removed by precedence):   On OP6 to state 58
  5 (removed by precedence):   On OP7 to state 59
  6:   On '+' to state 60
  7:   On '-' to state 61
  8:   On '*' to state 62
  9:   On '/' to state 63
  Reduce by 31: conditional_exp -> conditional_exp OP6 conditional_exp  . 


State 76:
32: conditional_exp -> conditional_exp OP7 conditional_exp  . 
27: conditional_exp -> conditional_exp  . OP2 conditional_exp 
28: conditional_exp -> conditional_exp  . OP3 conditional_exp 
29: conditional_exp -> conditional_exp  . OP4 conditional_exp 
30: conditional_exp -> conditional_exp  . OP5 conditional_exp 
31: conditional_exp -> conditional_exp  . OP6 conditional_exp 
32: conditional_exp -> conditional_exp  . OP7 conditional_exp 
33: conditional_exp -> conditional_exp  . '+' conditional_exp 
34: conditional_exp -> conditional_exp  . '-' conditional_exp 
35: conditional_exp -> conditional_exp  . '*' conditional_exp 
36: conditional_exp -> conditional_exp  . '/' conditional_exp 
  0 (removed by precedence):   On OP2 to state 54
  1 (removed by precedence):   On OP3 to state 55
  2 (removed by precedence):   On OP4 to state 56
  3 (removed by precedence):   On OP5 to state 57
  4 (removed by precedence):   On OP6 to state 58
  5 (removed by precedence):   On OP7 to state 59
  6:   On '+' to state 60
  7:   On '-' to state 61
  8:   On '*' to state 62
  9:   On '/' to state 63
  Reduce by 32: conditional_exp -> conditional_exp OP7 conditional_exp  . 


State 77:
33: conditional_exp -> conditional_exp '+' conditional_exp  . 
27: conditional_exp -> conditional_exp  . OP2 conditional_exp 
28: conditional_exp -> conditional_exp  . OP3 conditional_exp 
29: conditional_exp -> conditional_exp  . OP4 conditional_exp 
30: conditional_exp -> conditional_exp  . OP5 conditional_exp 
31: conditional_exp -> conditional_exp  . OP6 conditional_exp 
32: conditional_exp -> conditional_exp  . OP7 conditional_exp 
33: conditional_exp -> conditional_exp  . '+' conditional_exp 
34: conditional_exp -> conditional_exp  . '-' conditional_exp 
35: conditional_exp -> conditional_exp  . '*' conditional_exp 
36: conditional_exp -> conditional_exp  . '/' conditional_exp 
  0 (removed by precedence):   On OP2 to state 54
  1 (removed by precedence):   On OP3 to state 55
  2 (removed by precedence):   On OP4 to state 56
  3 (removed by precedence):   On OP5 to state 57
  4 (removed by precedence):   On OP6 to state 58
  5 (removed by precedence):   On OP7 to state 59
  6 (removed by precedence):   On '+' to state 60
  7 (removed by precedence):   On '-' to state 61
  8:   On '*' to state 62
  9:   On '/' to state 63
  Reduce by 33: conditional_exp -> conditional_exp '+' conditional_exp  . 


State 78:
34: conditional_exp -> conditional_exp '-' conditional_exp  . 
27: conditional_exp -> conditional_exp  . OP2 conditional_exp 
28: conditional_exp -> conditional_exp  . OP3 conditional_exp 
29: conditional_exp -> conditional_exp  . OP4 conditional_exp 
30: conditional_exp -> conditional_exp  . OP5 conditional_exp 
31: conditional_exp -> conditional_exp  . OP6 conditional_exp 
32: conditional_exp -> conditional_exp  . OP7 conditional_exp 
33: conditional_exp -> conditional_exp  . '+' conditional_exp 
34: conditional_exp -> conditional_exp  . '-' conditional_exp 
35: conditional_exp -> conditional_exp  . '*' conditional_exp 
36: conditional_exp -> conditional_exp  . '/' conditional_exp 
  0 (removed by precedence):   On OP2 to state 54
  1 (removed by precedence):   On OP3 to state 55
  2 (removed by precedence):   On OP4 to state 56
  3 (removed by precedence):   On OP5 to state 57
  4 (removed by precedence):   On OP6 to state 58
  5 (removed by precedence):   On OP7 to state 59
  6 (removed by precedence):   On '+' to state 60
  7 (removed by precedence):   On '-' to state 61
  8:   On '*' to state 62
  9:   On '/' to state 63
  Reduce by 34: conditional_exp -> conditional_exp '-' conditional_exp  . 


State 79:
35: conditional_exp -> conditional_exp '*' conditional_exp  . 
27: conditional_exp -> conditional_exp  . OP2 conditional_exp 
28: conditional_exp -> conditional_exp  . OP3 conditional_exp 
29: conditional_exp -> conditional_exp  . OP4 conditional_exp 
30: conditional_exp -> conditional_exp  . OP5 conditional_exp 
31: conditional_exp -> conditional_exp  . OP6 conditional_exp 
32: conditional_exp -> conditional_exp  . OP7 conditional_exp 
33: conditional_exp -> conditional_exp  . '+' conditional_exp 
34: conditional_exp -> conditional_exp  . '-' conditional_exp 
35: conditional_exp -> conditional_exp  . '*' conditional_exp 
36: conditional_exp -> conditional_exp  . '/' conditional_exp 
  0 (removed by precedence):   On OP2 to state 54
  1 (removed by precedence):   On OP3 to state 55
  2 (removed by precedence):   On OP4 to state 56
  3 (removed by precedence):   On OP5 to state 57
  4 (removed by precedence):   On OP6 to state 58
  5 (removed by precedence):   On OP7 to state 59
  6 (removed by precedence):   On '+' to state 60
  7 (removed by precedence):   On '-' to state 61
  8 (removed by precedence):   On '*' to state 62
  9 (removed by precedence):   On '/' to state 63
  Reduce by 35: conditional_exp -> conditional_exp '*' conditional_exp  . 


State 80:
36: conditional_exp -> conditional_exp '/' conditional_exp  . 
27: conditional_exp -> conditional_exp  . OP2 conditional_exp 
28: conditional_exp -> conditional_exp  . OP3 conditional_exp 
29: conditional_exp -> conditional_exp  . OP4 conditional_exp 
30: conditional_exp -> conditional_exp  . OP5 conditional_exp 
31: conditional_exp -> conditional_exp  . OP6 conditional_exp 
32: conditional_exp -> conditional_exp  . OP7 conditional_exp 
33: conditional_exp -> conditional_exp  . '+' conditional_exp 
34: conditional_exp -> conditional_exp  . '-' conditional_exp 
35: conditional_exp -> conditional_exp  . '*' conditional_exp 
36: conditional_exp -> conditional_exp  . '/' conditional_exp 
  0 (removed by precedence):   On OP2 to state 54
  1 (removed by precedence):   On OP3 to state 55
  2 (removed by precedence):   On OP4 to state 56
  3 (removed by precedence):   On OP5 to state 57
  4 (removed by precedence):   On OP6 to state 58
  5 (removed by precedence):   On OP7 to state 59
  6 (removed by precedence):   On '+' to state 60
  7 (removed by precedence):   On '-' to state 61
  8 (removed by precedence):   On '*' to state 62
  9 (removed by precedence):   On '/' to state 63
  Reduce by 36: conditional_exp -> conditional_exp '/' conditional_exp  . 


State 81:
41: unary_exp -> '(' FLOAT ')'  . unary_exp 
  0:   On unary_exp to state 86
  1:   On '-' to state 45
  2:   On variable to state 46
  3:   On constant to state 47
  4:   On '(' to state 48
  5:   On NAME to state 38
  6:   On INTEGER_NUMBER to state 49
  7:   On FLOAT_NUMBER to state 50


State 82:
42: unary_exp -> '(' INTEGER ')'  . unary_exp 
  0:   On unary_exp to state 87
  1:   On '-' to state 45
  2:   On variable to state 46
  3:   On constant to state 47
  4:   On '(' to state 48
  5:   On NAME to state 38
  6:   On INTEGER_NUMBER to state 49
  7:   On FLOAT_NUMBER to state 50


State 83:
43: unary_exp -> '(' DOUBLE ')'  . unary_exp 
  0:   On unary_exp to state 88
  1:   On '-' to state 45
  2:   On variable to state 46
  3:   On constant to state 47
  4:   On '(' to state 48
  5:   On NAME to state 38
  6:   On INTEGER_NUMBER to state 49
  7:   On FLOAT_NUMBER to state 50


State 84:
44: unary_exp -> '(' conditional_exp ')'  . 
  Reduce by 44: unary_exp -> '(' conditional_exp ')'  . 


State 85:
25: IFELSE -> IF '(' conditional_exp ')' GOTO_exp ELSE  . GOTO_exp 
  0:   On GOTO_exp to state 89
  1:   On GOTO to state 36


State 86:
41: unary_exp -> '(' FLOAT ')' unary_exp  . 
  Reduce by 41: unary_exp -> '(' FLOAT ')' unary_exp  . 


State 87:
42: unary_exp -> '(' INTEGER ')' unary_exp  . 
  Reduce by 42: unary_exp -> '(' INTEGER ')' unary_exp  . 


State 88:
43: unary_exp -> '(' DOUBLE ')' unary_exp  . 
  Reduce by 43: unary_exp -> '(' DOUBLE ')' unary_exp  . 


State 89:
25: IFELSE -> IF '(' conditional_exp ')' GOTO_exp ELSE GOTO_exp  . 
  Reduce by 25: IFELSE -> IF '(' conditional_exp ')' GOTO_exp ELSE GOTO_exp  . 



