// Generated by Bisonc++ V4.01.00 on Fri, 14 Feb 2014 11:06:32 +0530

// $insert class.ih
#include "parser.ih"

// The FIRST element of SR arrays shown below uses `d_type', defining the
// state's type, and `d_lastIdx' containing the last element's index. If
// d_lastIdx contains the REQ_TOKEN bitflag (see below) then the state needs
// a token: if in this state d_token__ is _UNDETERMINED_, nextToken() will be
// called

// The LAST element of SR arrays uses `d_token' containing the last retrieved
// token to speed up the (linear) seach.  Except for the first element of SR
// arrays, the field `d_action' is used to determine what to do next. If
// positive, it represents the next state (used with SHIFT); if zero, it
// indicates `ACCEPT', if negative, -d_action represents the number of the
// rule to reduce to.

// `lookup()' tries to find d_token__ in the current SR array. If it fails, and
// there is no default reduction UNEXPECTED_TOKEN__ is thrown, which is then
// caught by the error-recovery function.

// The error-recovery function will pop elements off the stack until a state
// having bit flag ERR_ITEM is found. This state has a transition on _error_
// which is applied. In this _error_ state, while the current token is not a
// proper continuation, new tokens are obtained by nextToken(). If such a
// token is found, error recovery is successful and the token is
// handled according to the error state's SR table and parsing continues.
// During error recovery semantic actions are ignored.

// A state flagged with the DEF_RED flag will perform a default
// reduction if no other continuations are available for the current token.

// The ACCEPT STATE never shows a default reduction: when it is reached the
// parser returns ACCEPT(). During the grammar
// analysis phase a default reduction may have been defined, but it is
// removed during the state-definition phase.

// So:
//      s_x[] = 
//      {
//                  [_field_1_]         [_field_2_]
//
// First element:   {state-type,        idx of last element},
// Other elements:  {required token,    action to perform},
//                                      ( < 0: reduce, 
//                                          0: ACCEPT,
//                                        > 0: next state)
// Last element:    {set to d_token__,    action to perform}
//      }

// When the --thread-safe option is specified, all static data are defined as
// const. If --thread-safe is not provided, the state-tables are not defined
// as const, since the lookup() function below will modify them


namespace // anonymous
{
    char const author[] = "Frank B. Brokken (f.b.brokken@rug.nl)";

    enum 
    {
        STACK_EXPANSION = 5     // size to expand the state-stack with when
                                // full
    };

    enum ReservedTokens
    {
        PARSE_ACCEPT     = 0,   // `ACCEPT' TRANSITION
        _UNDETERMINED_   = -2,
        _EOF_            = -1,
        _error_          = 256
    };
    enum StateType       // modify statetype/data.cc when this enum changes
    {
        NORMAL,
        ERR_ITEM,
        REQ_TOKEN,
        ERR_REQ,    // ERR_ITEM | REQ_TOKEN
        DEF_RED,    // state having default reduction
        ERR_DEF,    // ERR_ITEM | DEF_RED
        REQ_DEF,    // REQ_TOKEN | DEF_RED
        ERR_REQ_DEF // ERR_ITEM | REQ_TOKEN | DEF_RED
    };    
    struct PI__     // Production Info
    {
        size_t d_nonTerm; // identification number of this production's
                            // non-terminal 
        size_t d_size;    // number of elements in this production 
    };

    struct SR__     // Shift Reduce info, see its description above
    {
        union
        {
            int _field_1_;      // initializer, allowing initializations 
                                // of the SR s_[] arrays
            int d_type;
            int d_token;
        };
        union
        {
            int _field_2_;

            int d_lastIdx;          // if negative, the state uses SHIFT
            int d_action;           // may be negative (reduce), 
                                    // postive (shift), or 0 (accept)
            size_t d_errorState;    // used with Error states
        };
    };

    // $insert staticdata
    
// Productions Info Records:
PI__ const s_productionInfo[] = 
{
     {0, 0}, // not used: reduction values are negative
     {287, 4}, // 1: program ->  declaration_statement_list procedure_name #0001 procedure_body
     {290, 0}, // 2: #0001 ->  <empty>
     {287, 3}, // 3: program ->  procedure_name #0002 procedure_body
     {291, 0}, // 4: #0002 ->  <empty>
     {288, 3}, // 5: procedure_name (NAME) ->  NAME '(' ')'
     {289, 5}, // 6: procedure_body ('{') ->  '{' declaration_statement_list #0003 basic_block_list '}'
     {292, 0}, // 7: #0003 ->  <empty>
     {289, 3}, // 8: procedure_body ('{') ->  '{' basic_block_list '}'
     {293, 1}, // 9: declaration_statement_list ->  declaration_statement
     {293, 2}, // 10: declaration_statement_list ->  declaration_statement_list declaration_statement
     {294, 3}, // 11: declaration_statement (INTEGER) ->  INTEGER NAME ';'
     {294, 3}, // 12: declaration_statement (FLOAT) ->  FLOAT NAME ';'
     {294, 3}, // 13: declaration_statement (DOUBLE) ->  DOUBLE NAME ';'
     {295, 2}, // 14: basic_block_list ->  basic_block_list basic_block
     {295, 1}, // 15: basic_block_list ->  basic_block
     {296, 3}, // 16: basic_block (basicblock_number) ->  basicblock_number ':' executable_statement_list
     {297, 1}, // 17: executable_statement_list ->  assignment_statement_list
     {297, 3}, // 18: executable_statement_list (RETURN) ->  assignment_statement_list RETURN ';'
     {297, 2}, // 19: executable_statement_list ->  assignment_statement_list IFELSE
     {297, 2}, // 20: executable_statement_list ->  assignment_statement_list GOTO_exp
     {298, 0}, // 21: assignment_statement_list ->  <empty>
     {298, 2}, // 22: assignment_statement_list ->  assignment_statement_list assignment_statement
     {299, 4}, // 23: assignment_statement (ASSIGN_OP) ->  variable ASSIGN_OP conditional_exp ';'
     {300, 7}, // 24: IFELSE (IF) ->  IF '(' conditional_exp ')' GOTO_exp ELSE GOTO_exp
     {301, 3}, // 25: GOTO_exp (GOTO) ->  GOTO basicblock_number ';'
     {302, 3}, // 26: conditional_exp (OP2) ->  conditional_exp OP2 conditional_exp
     {302, 3}, // 27: conditional_exp (OP3) ->  conditional_exp OP3 conditional_exp
     {302, 3}, // 28: conditional_exp (OP4) ->  conditional_exp OP4 conditional_exp
     {302, 3}, // 29: conditional_exp (OP5) ->  conditional_exp OP5 conditional_exp
     {302, 3}, // 30: conditional_exp (OP6) ->  conditional_exp OP6 conditional_exp
     {302, 3}, // 31: conditional_exp (OP7) ->  conditional_exp OP7 conditional_exp
     {302, 3}, // 32: conditional_exp ('+') ->  conditional_exp '+' conditional_exp
     {302, 3}, // 33: conditional_exp ('-') ->  conditional_exp '-' conditional_exp
     {302, 3}, // 34: conditional_exp ('*') ->  conditional_exp '*' conditional_exp
     {302, 3}, // 35: conditional_exp ('/') ->  conditional_exp '/' conditional_exp
     {302, 2}, // 36: conditional_exp ('-') ->  '-' conditional_exp
     {302, 1}, // 37: conditional_exp ->  variable
     {302, 1}, // 38: conditional_exp ->  constant
     {302, 4}, // 39: conditional_exp ('(') ->  '(' FLOAT ')' conditional_exp
     {302, 4}, // 40: conditional_exp ('(') ->  '(' DOUBLE ')' conditional_exp
     {302, 4}, // 41: conditional_exp ('(') ->  '(' INTEGER ')' conditional_exp
     {302, 3}, // 42: conditional_exp ('(') ->  '(' conditional_exp ')'
     {303, 1}, // 43: variable (NAME) ->  NAME
     {304, 1}, // 44: constant (INTEGER_NUMBER) ->  INTEGER_NUMBER
     {304, 1}, // 45: constant (FLOAT_NUMBER) ->  FLOAT_NUMBER
     {305, 1}, // 46: program_$ ->  program
};

// State info and SR__ transitions for each state.


SR__ s_0[] =
{
    { { REQ_TOKEN}, { 9} },                              
    { {       287}, { 1} }, // program                   
    { {       293}, { 2} }, // declaration_statement_list
    { {       288}, { 3} }, // procedure_name            
    { {       294}, { 4} }, // declaration_statement     
    { {       260}, { 5} }, // NAME                      
    { {       262}, { 6} }, // INTEGER                   
    { {       263}, { 7} }, // FLOAT                     
    { {       264}, { 8} }, // DOUBLE                    
    { {         0}, { 0} },                              
};

SR__ s_1[] =
{
    { { REQ_TOKEN}, {            2} }, 
    { {     _EOF_}, { PARSE_ACCEPT} }, 
    { {         0}, {            0} }, 
};

SR__ s_2[] =
{
    { { REQ_TOKEN}, {  7} },                         
    { {       288}, {  9} }, // procedure_name       
    { {       294}, { 10} }, // declaration_statement
    { {       260}, {  5} }, // NAME                 
    { {       262}, {  6} }, // INTEGER              
    { {       263}, {  7} }, // FLOAT                
    { {       264}, {  8} }, // DOUBLE               
    { {         0}, {  0} },                         
};

SR__ s_3[] =
{
    { { DEF_RED}, {  2} },         
    { {     291}, { 11} }, // #0002
    { {       0}, { -4} },         
};

SR__ s_4[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -9} }, 
};

SR__ s_5[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {        40}, { 12} }, // '('
    { {         0}, {  0} },       
};

SR__ s_6[] =
{
    { { REQ_TOKEN}, {  2} },        
    { {       260}, { 13} }, // NAME
    { {         0}, {  0} },        
};

SR__ s_7[] =
{
    { { REQ_TOKEN}, {  2} },        
    { {       260}, { 14} }, // NAME
    { {         0}, {  0} },        
};

SR__ s_8[] =
{
    { { REQ_TOKEN}, {  2} },        
    { {       260}, { 15} }, // NAME
    { {         0}, {  0} },        
};

SR__ s_9[] =
{
    { { DEF_RED}, {  2} },         
    { {     290}, { 16} }, // #0001
    { {       0}, { -2} },         
};

SR__ s_10[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -10} }, 
};

SR__ s_11[] =
{
    { { REQ_TOKEN}, {  3} },                  
    { {       289}, { 17} }, // procedure_body
    { {       123}, { 18} }, // '{'           
    { {         0}, {  0} },                  
};

SR__ s_12[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {        41}, { 19} }, // ')'
    { {         0}, {  0} },       
};

SR__ s_13[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {        59}, { 20} }, // ';'
    { {         0}, {  0} },       
};

SR__ s_14[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {        59}, { 21} }, // ';'
    { {         0}, {  0} },       
};

SR__ s_15[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {        59}, { 22} }, // ';'
    { {         0}, {  0} },       
};

SR__ s_16[] =
{
    { { REQ_TOKEN}, {  3} },                  
    { {       289}, { 23} }, // procedure_body
    { {       123}, { 18} }, // '{'           
    { {         0}, {  0} },                  
};

SR__ s_17[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -3} }, 
};

SR__ s_18[] =
{
    { { REQ_TOKEN}, {  9} },                              
    { {       293}, { 24} }, // declaration_statement_list
    { {       295}, { 25} }, // basic_block_list          
    { {       294}, {  4} }, // declaration_statement     
    { {       296}, { 26} }, // basic_block               
    { {       262}, {  6} }, // INTEGER                   
    { {       263}, {  7} }, // FLOAT                     
    { {       264}, {  8} }, // DOUBLE                    
    { {       258}, { 27} }, // basicblock_number         
    { {         0}, {  0} },                              
};

SR__ s_19[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -5} }, 
};

SR__ s_20[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -11} }, 
};

SR__ s_21[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -12} }, 
};

SR__ s_22[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -13} }, 
};

SR__ s_23[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -1} }, 
};

SR__ s_24[] =
{
    { { REQ_DEF}, {  6} },                         
    { {     292}, { 28} }, // #0003                
    { {     294}, { 10} }, // declaration_statement
    { {     262}, {  6} }, // INTEGER              
    { {     263}, {  7} }, // FLOAT                
    { {     264}, {  8} }, // DOUBLE               
    { {       0}, { -7} },                         
};

SR__ s_25[] =
{
    { { REQ_TOKEN}, {  4} },                     
    { {       125}, { 29} }, // '}'              
    { {       296}, { 30} }, // basic_block      
    { {       258}, { 27} }, // basicblock_number
    { {         0}, {  0} },                     
};

SR__ s_26[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -15} }, 
};

SR__ s_27[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {        58}, { 31} }, // ':'
    { {         0}, {  0} },       
};

SR__ s_28[] =
{
    { { REQ_TOKEN}, {  4} },                     
    { {       295}, { 32} }, // basic_block_list 
    { {       296}, { 26} }, // basic_block      
    { {       258}, { 27} }, // basicblock_number
    { {         0}, {  0} },                     
};

SR__ s_29[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -8} }, 
};

SR__ s_30[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -14} }, 
};

SR__ s_31[] =
{
    { { DEF_RED}, {   3} },                             
    { {     297}, {  33} }, // executable_statement_list
    { {     298}, {  34} }, // assignment_statement_list
    { {       0}, { -21} },                             
};

SR__ s_32[] =
{
    { { REQ_TOKEN}, {  4} },                     
    { {       125}, { 35} }, // '}'              
    { {       296}, { 30} }, // basic_block      
    { {       258}, { 27} }, // basicblock_number
    { {         0}, {  0} },                     
};

SR__ s_33[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -16} }, 
};

SR__ s_34[] =
{
    { { REQ_DEF}, {   9} },                        
    { {     261}, {  36} }, // RETURN              
    { {     300}, {  37} }, // IFELSE              
    { {     301}, {  38} }, // GOTO_exp            
    { {     299}, {  39} }, // assignment_statement
    { {     265}, {  40} }, // IF                  
    { {     267}, {  41} }, // GOTO                
    { {     303}, {  42} }, // variable            
    { {     260}, {  43} }, // NAME                
    { {       0}, { -17} },                        
};

SR__ s_35[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -6} }, 
};

SR__ s_36[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {        59}, { 44} }, // ';'
    { {         0}, {  0} },       
};

SR__ s_37[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -19} }, 
};

SR__ s_38[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -20} }, 
};

SR__ s_39[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -22} }, 
};

SR__ s_40[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {        40}, { 45} }, // '('
    { {         0}, {  0} },       
};

SR__ s_41[] =
{
    { { REQ_TOKEN}, {  2} },                     
    { {       258}, { 46} }, // basicblock_number
    { {         0}, {  0} },                     
};

SR__ s_42[] =
{
    { { REQ_TOKEN}, {  2} },             
    { {       268}, { 47} }, // ASSIGN_OP
    { {         0}, {  0} },             
};

SR__ s_43[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -43} }, 
};

SR__ s_44[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -18} }, 
};

SR__ s_45[] =
{
    { { REQ_TOKEN}, {  9} },                   
    { {       302}, { 48} }, // conditional_exp
    { {        45}, { 49} }, // '-'            
    { {       303}, { 50} }, // variable       
    { {       304}, { 51} }, // constant       
    { {        40}, { 52} }, // '('            
    { {       260}, { 43} }, // NAME           
    { {       257}, { 53} }, // INTEGER_NUMBER 
    { {       259}, { 54} }, // FLOAT_NUMBER   
    { {         0}, {  0} },                   
};

SR__ s_46[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {        59}, { 55} }, // ';'
    { {         0}, {  0} },       
};

SR__ s_47[] =
{
    { { REQ_TOKEN}, {  9} },                   
    { {       302}, { 56} }, // conditional_exp
    { {        45}, { 49} }, // '-'            
    { {       303}, { 50} }, // variable       
    { {       304}, { 51} }, // constant       
    { {        40}, { 52} }, // '('            
    { {       260}, { 43} }, // NAME           
    { {       257}, { 53} }, // INTEGER_NUMBER 
    { {       259}, { 54} }, // FLOAT_NUMBER   
    { {         0}, {  0} },                   
};

SR__ s_48[] =
{
    { { REQ_TOKEN}, { 12} },       
    { {        41}, { 57} }, // ')'
    { {       269}, { 58} }, // OP2
    { {       270}, { 59} }, // OP3
    { {       274}, { 60} }, // OP4
    { {       272}, { 61} }, // OP5
    { {       273}, { 62} }, // OP6
    { {       271}, { 63} }, // OP7
    { {        43}, { 64} }, // '+'
    { {        45}, { 65} }, // '-'
    { {        42}, { 66} }, // '*'
    { {        47}, { 67} }, // '/'
    { {         0}, {  0} },       
};

SR__ s_49[] =
{
    { { REQ_TOKEN}, {  9} },                   
    { {       302}, { 68} }, // conditional_exp
    { {        45}, { 49} }, // '-'            
    { {       303}, { 50} }, // variable       
    { {       304}, { 51} }, // constant       
    { {        40}, { 52} }, // '('            
    { {       260}, { 43} }, // NAME           
    { {       257}, { 53} }, // INTEGER_NUMBER 
    { {       259}, { 54} }, // FLOAT_NUMBER   
    { {         0}, {  0} },                   
};

SR__ s_50[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -37} }, 
};

SR__ s_51[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -38} }, 
};

SR__ s_52[] =
{
    { { REQ_TOKEN}, { 12} },                   
    { {       263}, { 69} }, // FLOAT          
    { {       264}, { 70} }, // DOUBLE         
    { {       262}, { 71} }, // INTEGER        
    { {       302}, { 72} }, // conditional_exp
    { {        45}, { 49} }, // '-'            
    { {       303}, { 50} }, // variable       
    { {       304}, { 51} }, // constant       
    { {        40}, { 52} }, // '('            
    { {       260}, { 43} }, // NAME           
    { {       257}, { 53} }, // INTEGER_NUMBER 
    { {       259}, { 54} }, // FLOAT_NUMBER   
    { {         0}, {  0} },                   
};

SR__ s_53[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -44} }, 
};

SR__ s_54[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -45} }, 
};

SR__ s_55[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -25} }, 
};

SR__ s_56[] =
{
    { { REQ_TOKEN}, { 12} },       
    { {        59}, { 73} }, // ';'
    { {       269}, { 58} }, // OP2
    { {       270}, { 59} }, // OP3
    { {       274}, { 60} }, // OP4
    { {       272}, { 61} }, // OP5
    { {       273}, { 62} }, // OP6
    { {       271}, { 63} }, // OP7
    { {        43}, { 64} }, // '+'
    { {        45}, { 65} }, // '-'
    { {        42}, { 66} }, // '*'
    { {        47}, { 67} }, // '/'
    { {         0}, {  0} },       
};

SR__ s_57[] =
{
    { { REQ_TOKEN}, {  3} },            
    { {       301}, { 74} }, // GOTO_exp
    { {       267}, { 41} }, // GOTO    
    { {         0}, {  0} },            
};

SR__ s_58[] =
{
    { { REQ_TOKEN}, {  9} },                   
    { {       302}, { 75} }, // conditional_exp
    { {        45}, { 49} }, // '-'            
    { {       303}, { 50} }, // variable       
    { {       304}, { 51} }, // constant       
    { {        40}, { 52} }, // '('            
    { {       260}, { 43} }, // NAME           
    { {       257}, { 53} }, // INTEGER_NUMBER 
    { {       259}, { 54} }, // FLOAT_NUMBER   
    { {         0}, {  0} },                   
};

SR__ s_59[] =
{
    { { REQ_TOKEN}, {  9} },                   
    { {       302}, { 76} }, // conditional_exp
    { {        45}, { 49} }, // '-'            
    { {       303}, { 50} }, // variable       
    { {       304}, { 51} }, // constant       
    { {        40}, { 52} }, // '('            
    { {       260}, { 43} }, // NAME           
    { {       257}, { 53} }, // INTEGER_NUMBER 
    { {       259}, { 54} }, // FLOAT_NUMBER   
    { {         0}, {  0} },                   
};

SR__ s_60[] =
{
    { { REQ_TOKEN}, {  9} },                   
    { {       302}, { 77} }, // conditional_exp
    { {        45}, { 49} }, // '-'            
    { {       303}, { 50} }, // variable       
    { {       304}, { 51} }, // constant       
    { {        40}, { 52} }, // '('            
    { {       260}, { 43} }, // NAME           
    { {       257}, { 53} }, // INTEGER_NUMBER 
    { {       259}, { 54} }, // FLOAT_NUMBER   
    { {         0}, {  0} },                   
};

SR__ s_61[] =
{
    { { REQ_TOKEN}, {  9} },                   
    { {       302}, { 78} }, // conditional_exp
    { {        45}, { 49} }, // '-'            
    { {       303}, { 50} }, // variable       
    { {       304}, { 51} }, // constant       
    { {        40}, { 52} }, // '('            
    { {       260}, { 43} }, // NAME           
    { {       257}, { 53} }, // INTEGER_NUMBER 
    { {       259}, { 54} }, // FLOAT_NUMBER   
    { {         0}, {  0} },                   
};

SR__ s_62[] =
{
    { { REQ_TOKEN}, {  9} },                   
    { {       302}, { 79} }, // conditional_exp
    { {        45}, { 49} }, // '-'            
    { {       303}, { 50} }, // variable       
    { {       304}, { 51} }, // constant       
    { {        40}, { 52} }, // '('            
    { {       260}, { 43} }, // NAME           
    { {       257}, { 53} }, // INTEGER_NUMBER 
    { {       259}, { 54} }, // FLOAT_NUMBER   
    { {         0}, {  0} },                   
};

SR__ s_63[] =
{
    { { REQ_TOKEN}, {  9} },                   
    { {       302}, { 80} }, // conditional_exp
    { {        45}, { 49} }, // '-'            
    { {       303}, { 50} }, // variable       
    { {       304}, { 51} }, // constant       
    { {        40}, { 52} }, // '('            
    { {       260}, { 43} }, // NAME           
    { {       257}, { 53} }, // INTEGER_NUMBER 
    { {       259}, { 54} }, // FLOAT_NUMBER   
    { {         0}, {  0} },                   
};

SR__ s_64[] =
{
    { { REQ_TOKEN}, {  9} },                   
    { {       302}, { 81} }, // conditional_exp
    { {        45}, { 49} }, // '-'            
    { {       303}, { 50} }, // variable       
    { {       304}, { 51} }, // constant       
    { {        40}, { 52} }, // '('            
    { {       260}, { 43} }, // NAME           
    { {       257}, { 53} }, // INTEGER_NUMBER 
    { {       259}, { 54} }, // FLOAT_NUMBER   
    { {         0}, {  0} },                   
};

SR__ s_65[] =
{
    { { REQ_TOKEN}, {  9} },                   
    { {       302}, { 82} }, // conditional_exp
    { {        45}, { 49} }, // '-'            
    { {       303}, { 50} }, // variable       
    { {       304}, { 51} }, // constant       
    { {        40}, { 52} }, // '('            
    { {       260}, { 43} }, // NAME           
    { {       257}, { 53} }, // INTEGER_NUMBER 
    { {       259}, { 54} }, // FLOAT_NUMBER   
    { {         0}, {  0} },                   
};

SR__ s_66[] =
{
    { { REQ_TOKEN}, {  9} },                   
    { {       302}, { 83} }, // conditional_exp
    { {        45}, { 49} }, // '-'            
    { {       303}, { 50} }, // variable       
    { {       304}, { 51} }, // constant       
    { {        40}, { 52} }, // '('            
    { {       260}, { 43} }, // NAME           
    { {       257}, { 53} }, // INTEGER_NUMBER 
    { {       259}, { 54} }, // FLOAT_NUMBER   
    { {         0}, {  0} },                   
};

SR__ s_67[] =
{
    { { REQ_TOKEN}, {  9} },                   
    { {       302}, { 84} }, // conditional_exp
    { {        45}, { 49} }, // '-'            
    { {       303}, { 50} }, // variable       
    { {       304}, { 51} }, // constant       
    { {        40}, { 52} }, // '('            
    { {       260}, { 43} }, // NAME           
    { {       257}, { 53} }, // INTEGER_NUMBER 
    { {       259}, { 54} }, // FLOAT_NUMBER   
    { {         0}, {  0} },                   
};

SR__ s_68[] =
{
    { { REQ_DEF}, {   7} },       
    { {     269}, {  58} }, // OP2
    { {     270}, {  59} }, // OP3
    { {     274}, {  60} }, // OP4
    { {     272}, {  61} }, // OP5
    { {     273}, {  62} }, // OP6
    { {     271}, {  63} }, // OP7
    { {       0}, { -36} },       
};

SR__ s_69[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {        41}, { 85} }, // ')'
    { {         0}, {  0} },       
};

SR__ s_70[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {        41}, { 86} }, // ')'
    { {         0}, {  0} },       
};

SR__ s_71[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {        41}, { 87} }, // ')'
    { {         0}, {  0} },       
};

SR__ s_72[] =
{
    { { REQ_TOKEN}, { 12} },       
    { {        41}, { 88} }, // ')'
    { {       269}, { 58} }, // OP2
    { {       270}, { 59} }, // OP3
    { {       274}, { 60} }, // OP4
    { {       272}, { 61} }, // OP5
    { {       273}, { 62} }, // OP6
    { {       271}, { 63} }, // OP7
    { {        43}, { 64} }, // '+'
    { {        45}, { 65} }, // '-'
    { {        42}, { 66} }, // '*'
    { {        47}, { 67} }, // '/'
    { {         0}, {  0} },       
};

SR__ s_73[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -23} }, 
};

SR__ s_74[] =
{
    { { REQ_TOKEN}, {  2} },        
    { {       266}, { 89} }, // ELSE
    { {         0}, {  0} },        
};

SR__ s_75[] =
{
    { { REQ_DEF}, {   5} },       
    { {     274}, {  60} }, // OP4
    { {     272}, {  61} }, // OP5
    { {     273}, {  62} }, // OP6
    { {     271}, {  63} }, // OP7
    { {       0}, { -26} },       
};

SR__ s_76[] =
{
    { { REQ_DEF}, {   5} },       
    { {     274}, {  60} }, // OP4
    { {     272}, {  61} }, // OP5
    { {     273}, {  62} }, // OP6
    { {     271}, {  63} }, // OP7
    { {       0}, { -27} },       
};

SR__ s_77[] =
{
    { { REQ_DEF}, {   1} }, 
    { {       0}, { -28} }, 
};

SR__ s_78[] =
{
    { { REQ_DEF}, {   1} }, 
    { {       0}, { -29} }, 
};

SR__ s_79[] =
{
    { { REQ_DEF}, {   1} }, 
    { {       0}, { -30} }, 
};

SR__ s_80[] =
{
    { { REQ_DEF}, {   1} }, 
    { {       0}, { -31} }, 
};

SR__ s_81[] =
{
    { { REQ_DEF}, {   7} },       
    { {     269}, {  58} }, // OP2
    { {     270}, {  59} }, // OP3
    { {     274}, {  60} }, // OP4
    { {     272}, {  61} }, // OP5
    { {     273}, {  62} }, // OP6
    { {     271}, {  63} }, // OP7
    { {       0}, { -32} },       
};

SR__ s_82[] =
{
    { { REQ_DEF}, {   7} },       
    { {     269}, {  58} }, // OP2
    { {     270}, {  59} }, // OP3
    { {     274}, {  60} }, // OP4
    { {     272}, {  61} }, // OP5
    { {     273}, {  62} }, // OP6
    { {     271}, {  63} }, // OP7
    { {       0}, { -33} },       
};

SR__ s_83[] =
{
    { { REQ_DEF}, {   9} },       
    { {     269}, {  58} }, // OP2
    { {     270}, {  59} }, // OP3
    { {     274}, {  60} }, // OP4
    { {     272}, {  61} }, // OP5
    { {     273}, {  62} }, // OP6
    { {     271}, {  63} }, // OP7
    { {      43}, {  64} }, // '+'
    { {      45}, {  65} }, // '-'
    { {       0}, { -34} },       
};

SR__ s_84[] =
{
    { { REQ_DEF}, {   9} },       
    { {     269}, {  58} }, // OP2
    { {     270}, {  59} }, // OP3
    { {     274}, {  60} }, // OP4
    { {     272}, {  61} }, // OP5
    { {     273}, {  62} }, // OP6
    { {     271}, {  63} }, // OP7
    { {      43}, {  64} }, // '+'
    { {      45}, {  65} }, // '-'
    { {       0}, { -35} },       
};

SR__ s_85[] =
{
    { { REQ_TOKEN}, {  9} },                   
    { {       302}, { 90} }, // conditional_exp
    { {        45}, { 49} }, // '-'            
    { {       303}, { 50} }, // variable       
    { {       304}, { 51} }, // constant       
    { {        40}, { 52} }, // '('            
    { {       260}, { 43} }, // NAME           
    { {       257}, { 53} }, // INTEGER_NUMBER 
    { {       259}, { 54} }, // FLOAT_NUMBER   
    { {         0}, {  0} },                   
};

SR__ s_86[] =
{
    { { REQ_TOKEN}, {  9} },                   
    { {       302}, { 91} }, // conditional_exp
    { {        45}, { 49} }, // '-'            
    { {       303}, { 50} }, // variable       
    { {       304}, { 51} }, // constant       
    { {        40}, { 52} }, // '('            
    { {       260}, { 43} }, // NAME           
    { {       257}, { 53} }, // INTEGER_NUMBER 
    { {       259}, { 54} }, // FLOAT_NUMBER   
    { {         0}, {  0} },                   
};

SR__ s_87[] =
{
    { { REQ_TOKEN}, {  9} },                   
    { {       302}, { 92} }, // conditional_exp
    { {        45}, { 49} }, // '-'            
    { {       303}, { 50} }, // variable       
    { {       304}, { 51} }, // constant       
    { {        40}, { 52} }, // '('            
    { {       260}, { 43} }, // NAME           
    { {       257}, { 53} }, // INTEGER_NUMBER 
    { {       259}, { 54} }, // FLOAT_NUMBER   
    { {         0}, {  0} },                   
};

SR__ s_88[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -42} }, 
};

SR__ s_89[] =
{
    { { REQ_TOKEN}, {  3} },            
    { {       301}, { 93} }, // GOTO_exp
    { {       267}, { 41} }, // GOTO    
    { {         0}, {  0} },            
};

SR__ s_90[] =
{
    { { REQ_DEF}, {  11} },       
    { {     269}, {  58} }, // OP2
    { {     270}, {  59} }, // OP3
    { {     274}, {  60} }, // OP4
    { {     272}, {  61} }, // OP5
    { {     273}, {  62} }, // OP6
    { {     271}, {  63} }, // OP7
    { {      43}, {  64} }, // '+'
    { {      45}, {  65} }, // '-'
    { {      42}, {  66} }, // '*'
    { {      47}, {  67} }, // '/'
    { {       0}, { -39} },       
};

SR__ s_91[] =
{
    { { REQ_DEF}, {  11} },       
    { {     269}, {  58} }, // OP2
    { {     270}, {  59} }, // OP3
    { {     274}, {  60} }, // OP4
    { {     272}, {  61} }, // OP5
    { {     273}, {  62} }, // OP6
    { {     271}, {  63} }, // OP7
    { {      43}, {  64} }, // '+'
    { {      45}, {  65} }, // '-'
    { {      42}, {  66} }, // '*'
    { {      47}, {  67} }, // '/'
    { {       0}, { -40} },       
};

SR__ s_92[] =
{
    { { REQ_DEF}, {  11} },       
    { {     269}, {  58} }, // OP2
    { {     270}, {  59} }, // OP3
    { {     274}, {  60} }, // OP4
    { {     272}, {  61} }, // OP5
    { {     273}, {  62} }, // OP6
    { {     271}, {  63} }, // OP7
    { {      43}, {  64} }, // '+'
    { {      45}, {  65} }, // '-'
    { {      42}, {  66} }, // '*'
    { {      47}, {  67} }, // '/'
    { {       0}, { -41} },       
};

SR__ s_93[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -24} }, 
};


// State array:
SR__ *s_state[] =
{
  s_0,  s_1,  s_2,  s_3,  s_4,  s_5,  s_6,  s_7,  s_8,  s_9,
  s_10,  s_11,  s_12,  s_13,  s_14,  s_15,  s_16,  s_17,  s_18,  s_19,
  s_20,  s_21,  s_22,  s_23,  s_24,  s_25,  s_26,  s_27,  s_28,  s_29,
  s_30,  s_31,  s_32,  s_33,  s_34,  s_35,  s_36,  s_37,  s_38,  s_39,
  s_40,  s_41,  s_42,  s_43,  s_44,  s_45,  s_46,  s_47,  s_48,  s_49,
  s_50,  s_51,  s_52,  s_53,  s_54,  s_55,  s_56,  s_57,  s_58,  s_59,
  s_60,  s_61,  s_62,  s_63,  s_64,  s_65,  s_66,  s_67,  s_68,  s_69,
  s_70,  s_71,  s_72,  s_73,  s_74,  s_75,  s_76,  s_77,  s_78,  s_79,
  s_80,  s_81,  s_82,  s_83,  s_84,  s_85,  s_86,  s_87,  s_88,  s_89,
  s_90,  s_91,  s_92,  s_93,
};

} // anonymous namespace ends



// If the parsing function call uses arguments, then provide an overloaded
// function.  The code below doesn't rely on parameters, so no arguments are
// required.  Furthermore, parse uses a function try block to allow us to do
// ACCEPT and ABORT from anywhere, even from within members called by actions,
// simply throwing the appropriate exceptions.

ParserBase::ParserBase()
:
    d_stackIdx__(-1),
    // $insert debuginit
    d_debug__(false),
    d_nErrors__(0),
    // $insert requiredtokens
    d_requiredTokens__(0),
    d_acceptedTokens__(d_requiredTokens__),
    d_token__(_UNDETERMINED_),
    d_nextToken__(_UNDETERMINED_)
{}


void Parser::print__()
{
// $insert print
}

void ParserBase::clearin()
{
    d_token__ = d_nextToken__ = _UNDETERMINED_;
}

void ParserBase::push__(size_t state)
{
    if (static_cast<size_t>(d_stackIdx__ + 1) == d_stateStack__.size())
    {
        size_t newSize = d_stackIdx__ + STACK_EXPANSION;
        d_stateStack__.resize(newSize);
        d_valueStack__.resize(newSize);
    }
    ++d_stackIdx__;
    d_stateStack__[d_stackIdx__] = d_state__ = state;
    *(d_vsp__ = &d_valueStack__[d_stackIdx__]) = d_val__;
}

void ParserBase::popToken__()
{
    d_token__ = d_nextToken__;

    d_val__ = d_nextVal__;
    d_nextVal__ = STYPE__();

    d_nextToken__ = _UNDETERMINED_;
}
     
void ParserBase::pushToken__(int token)
{
    d_nextToken__ = d_token__;
    d_nextVal__ = d_val__;
    d_token__ = token;
}
     
void ParserBase::pop__(size_t count)
{
    if (d_stackIdx__ < static_cast<int>(count))
    {
        ABORT();
    }

    d_stackIdx__ -= count;
    d_state__ = d_stateStack__[d_stackIdx__];
    d_vsp__ = &d_valueStack__[d_stackIdx__];
}

inline size_t ParserBase::top__() const
{
    return d_stateStack__[d_stackIdx__];
}

void Parser::executeAction(int production)
{
    if (d_token__ != _UNDETERMINED_)
        pushToken__(d_token__);     // save an already available token

                                    // save default non-nested block $$
    if (int size = s_productionInfo[production].d_size)
        d_val__ = d_vsp__[1 - size];

    switch (production)
    {
        // $insert actioncases
        
        case 1:
#line 85 "parser.yy"
        {
         #if 0
         program_object.set_procedure_map(current_procedure, get_line_number());
         if (d_vsp__[-3].symbol_table)
         d_vsp__[-3].symbol_table->global_list_in_proc_map_check(get_line_number());
         delete d_vsp__[-3].symbol_table;
         #endif
         }
        break;

        case 2:
#line 79 "parser.yy"
        d_val__ = d_vsp__[-1];
        {
         #if 0
         program_object.set_global_table(*d_vsp__[-1].symbol_table);
         #endif
         }
        break;

        case 3:
#line 103 "parser.yy"
        { 
         #if 0
         program_object.set_procedure_map(current_procedure, get_line_number());
         #endif
         }
        break;

        case 4:
#line 97 "parser.yy"
        d_val__ = d_vsp__[0];
        {
         
         
         
         }
        break;

        case 5:
#line 112 "parser.yy"
        {
         #if 0
         current_procedure = new Procedure(void_data_type, *d_vsp__[-2].string_value);
         #endif
         }
        break;

        case 6:
#line 128 "parser.yy"
        {
         #if 0
         current_procedure->set_basic_block_list(*d_vsp__[-1].basic_block_list);
         delete d_vsp__[-1].basic_block_list;
         #endif
         }
        break;

        case 7:
#line 121 "parser.yy"
        d_val__ = d_vsp__[-1];
        {
         #if 0
         current_procedure->set_local_list(*d_vsp__[0].symbol_table);
         delete d_vsp__[0].symbol_table;
         #endif
         }
        break;

        case 8:
#line 137 "parser.yy"
        {
         #if 0
         current_procedure->set_basic_block_list(*d_vsp__[-1].basic_block_list);
         delete d_vsp__[-1].basic_block_list;
         #endif
         }
        break;

        case 9:
#line 148 "parser.yy"
        {
         #if 0
         int line = get_line_number();
         program_object.variable_in_proc_map_check(d_vsp__[0].symbol_entry->get_variable_name(), line);
         string var_name = d_vsp__[0].symbol_entry->get_variable_name();
         if (current_procedure && current_procedure->get_proc_name() == var_name)
         {
         int line = get_line_number();
         report_error("Variable name cannot be same as procedure name", line);
         }
         d_val__.symbol_table = new Symbol_Table();
         d_val__.symbol_table->push_symbol(d_vsp__[0].symbol_entry);
         #endif
         }
        break;

        case 10:
#line 166 "parser.yy"
        {
         #if 0
         
         
         int line = get_line_number();
         program_object.variable_in_proc_map_check(d_vsp__[0].symbol_entry->get_variable_name(), line);
         string var_name = d_vsp__[0].symbol_entry->get_variable_name();
         if (current_procedure && current_procedure->get_proc_name() == var_name)
         {
         int line = get_line_number();
         report_error("Variable name cannot be same as procedure name", line);
         }
         if (d_vsp__[-1].symbol_table != NULL)
         {
         if(d_vsp__[-1].symbol_table->variable_in_symbol_list_check(var_name))
         {
         int line = get_line_number();
         report_error("Variable is declared twice", line);
         }
         d_val__.symbol_table = d_vsp__[-1].symbol_table;
         }
         else
         d_val__.symbol_table = new Symbol_Table();
         d_val__.symbol_table->push_symbol(d_vsp__[0].symbol_entry);
         #endif
         }
        break;

        case 11:
#line 202 "parser.yy"
        {
         #if 0
         d_val__.symbol_entry = new Symbol_Table_Entry(*d_vsp__[-1].string_value, int_data_type);
         delete d_vsp__[-1].string_value;
         #endif
         }
        break;

        case 12:
#line 211 "parser.yy"
        {
         }
        break;

        case 13:
#line 216 "parser.yy"
        {
         }
        break;

        case 14:
#line 223 "parser.yy"
        {
         #if 0
         if (!d_vsp__[0].basic_block)
         {
         int line = get_line_number();
         report_error("Basic block doesn't exist", line);
         }
         bb_strictly_increasing_order_check(d_val__.basic_block_list, d_vsp__[0].basic_block->get_bb_number());
         d_val__.basic_block_list = d_vsp__[-1].basic_block_list;
         d_val__.basic_block_list->push_back(d_vsp__[0].basic_block);
         #endif
         
         }
        break;

        case 15:
#line 240 "parser.yy"
        {
         #if 0
         if (!d_vsp__[0].basic_block)
         {
         int line = get_line_number();
         report_error("Basic block doesn't exist", line);
         }
         d_val__.basic_block_list = new list<Basic_Block *>;
         d_val__.basic_block_list->push_back(d_vsp__[0].basic_block);
         #endif
         
         }
        break;

        case 16:
#line 259 "parser.yy"
        {
         #if 0
         if (d_vsp__[-2].integer_value < 2)
         {
         int line = get_line_number();
         report_error("Illegal basic block lable", line);
         }
         if (d_vsp__[0].ast_list != NULL)
         d_val__.basic_block = new Basic_Block(d_vsp__[-2].integer_value, *d_vsp__[0].ast_list);
         else
         {
         list<Ast *> * ast_list = new list<Ast *>;
         d_val__.basic_block = new Basic_Block(d_vsp__[-2].integer_value, *ast_list);
         }
         delete d_vsp__[0].ast_list;
         #endif
         }
        break;

        case 17:
#line 282 "parser.yy"
        {
         #if 0
         d_val__.ast_list = d_vsp__[0].ast_list;
         #endif
         
         }
        break;

        case 18:
#line 290 "parser.yy"
        {
         #if 0
         Ast * ret = new Return_Ast();
         if (d_vsp__[-2].ast_list != NULL)
         d_val__.ast_list = d_vsp__[-2].ast_list;
         else
         d_val__.ast_list = new list<Ast *>;
         d_val__.ast_list->push_back(ret);
         #endif
         
         }
        break;

        case 19:
#line 307 "parser.yy"
        { 
         #if 0
         if(d_vsp__[-1].ast_list != NULL)
         d_val__.ast_list = d_vsp__[-1].ast_list;
         else
         d_val__.ast_list = new list<Ast *>;
         d_val__.ast_list->push_back(d_vsp__[0].ast);
         #endif
         }
        break;

        case 20:
#line 319 "parser.yy"
        { 
         #if 0
         if(d_vsp__[-1].ast_list != NULL)
         d_val__.ast_list = d_vsp__[-1].ast_list;
         else
         d_val__.ast_list = new list<Ast *>;
         d_val__.ast_list->push_back(d_vsp__[0].goto_ast); 
         #endif
         }
        break;

        case 21:
#line 332 "parser.yy"
        { 
         #if 0
         
         d_val__.ast_list = NULL;
         #endif
         
         }
        break;

        case 22:
#line 341 "parser.yy"
        { 
         #if 0
         
         if (d_vsp__[-1].ast_list == NULL)
         d_val__.ast_list = new list<Ast *>;
         else
         d_val__.ast_list = d_vsp__[-1].ast_list;
         d_val__.ast_list->push_back(d_vsp__[0].ast);
         #endif
         
         }
        break;

        case 23:
#line 358 "parser.yy"
        { 
         #if 0
         d_val__.ast = new Assignment_Ast(d_vsp__[-3].ast, d_vsp__[-1].ast);
         #endif
         }
        break;

        case 24:
#line 366 "parser.yy"
        { 
         #if 0
         d_val__.ast = new IfCondition_Ast(d_vsp__[-2].goto_ast, d_vsp__[0].goto_ast, d_vsp__[-4].ast);
         #endif
         }
        break;

        case 25:
#line 375 "parser.yy"
        { 
         #if 0 
         d_val__.goto_ast = new Goto_Ast(d_vsp__[-1].integer_value);
         #endif
         }
        break;

        case 26:
#line 384 "parser.yy"
        {
         #if 0
         d_val__.ast = new Relational_Ast(d_vsp__[-2].ast, d_vsp__[0].ast, NE);
         #endif
         }
        break;

        case 27:
#line 391 "parser.yy"
        {
         #if 0
         d_val__.ast = new Relational_Ast(d_vsp__[-2].ast, d_vsp__[0].ast, EQ);
         #endif
         }
        break;

        case 28:
#line 398 "parser.yy"
        {
         #if 0
         d_val__.ast = new Relational_Ast(d_vsp__[-2].ast, d_vsp__[0].ast, GE);
         #endif
         }
        break;

        case 29:
#line 405 "parser.yy"
        {
         #if 0
         d_val__.ast = new Relational_Ast(d_vsp__[-2].ast, d_vsp__[0].ast, LE);
         #endif
         }
        break;

        case 30:
#line 412 "parser.yy"
        {
         #if 0
         d_val__.ast = new Relational_Ast(d_vsp__[-2].ast, d_vsp__[0].ast, GT);
         #endif
         }
        break;

        case 31:
#line 419 "parser.yy"
        {
         #if 0
         d_val__.ast = new Relational_Ast(d_vsp__[-2].ast, d_vsp__[0].ast, LT);
         #endif
         }
        break;

        case 32:
#line 426 "parser.yy"
        {
         }
        break;

        case 33:
#line 431 "parser.yy"
        {
         }
        break;

        case 34:
#line 436 "parser.yy"
        {
         }
        break;

        case 35:
#line 441 "parser.yy"
        {
         }
        break;

        case 36:
#line 446 "parser.yy"
        {
         }
        break;

        case 37:
#line 451 "parser.yy"
        {
         #if 0
         d_val__.ast = d_vsp__[0].ast;
         #endif
         }
        break;

        case 38:
#line 458 "parser.yy"
        {
         #if 0
         d_val__.ast = d_vsp__[0].ast;
         #endif
         }
        break;

        case 39:
#line 465 "parser.yy"
        {
         #if 0
         #endif
         }
        break;

        case 40:
#line 472 "parser.yy"
        {
         #if 0
         
         #endif
         }
        break;

        case 41:
#line 478 "parser.yy"
        {
         #if 0
         
         #endif
         }
        break;

        case 42:
#line 484 "parser.yy"
        {
         #if 0
         #endif
         }
        break;

        case 43:
#line 495 "parser.yy"
        {
         #if 0
         Symbol_Table_Entry var_table_entry;
         if (current_procedure->variable_in_symbol_list_check(*d_vsp__[0].string_value))
         var_table_entry = current_procedure->get_symbol_table_entry(*d_vsp__[0].string_value);
         else if (program_object.variable_in_symbol_list_check(*d_vsp__[0].string_value))
         var_table_entry = program_object.get_symbol_table_entry(*d_vsp__[0].string_value);
         else
         {
         int line = get_line_number();
         report_error("Variable has not been declared", line);
         }
         d_val__.ast = new Name_Ast(*d_vsp__[0].string_value, var_table_entry);
         delete d_vsp__[0].string_value;
         #endif
         
         }
        break;

        case 44:
#line 521 "parser.yy"
        {
         #if 0
         d_val__.ast = new Number_Ast<int>(d_vsp__[0].integer_value, int_data_type);
         #endif
         
         }
        break;

        case 45:
#line 529 "parser.yy"
        {
         }
        break;

    }
}

inline void ParserBase::reduce__(PI__ const &pi)
{
    d_token__ = pi.d_nonTerm;
    pop__(pi.d_size);

}

// If d_token__ is _UNDETERMINED_ then if d_nextToken__ is _UNDETERMINED_ another
// token is obtained from lex(). Then d_nextToken__ is assigned to d_token__.
void Parser::nextToken()
{
    if (d_token__ != _UNDETERMINED_)        // no need for a token: got one
        return;                             // already

    if (d_nextToken__ != _UNDETERMINED_)
    {
        popToken__();                       // consume pending token
    }
    else
    {
        ++d_acceptedTokens__;               // accept another token (see
                                            // errorRecover())
        d_token__ = lex();
        if (d_token__ <= 0)
            d_token__ = _EOF_;
    }
    print();
}

// if the final transition is negative, then we should reduce by the rule
// given by its positive value. Note that the `recovery' parameter is only
// used with the --debug option
int Parser::lookup(bool recovery)
{
    // $insert threading
    SR__ *sr = s_state[d_state__];        // get the appropriate state-table
    int lastIdx = sr->d_lastIdx;        // sentinel-index in the SR__ array

    SR__ *lastElementPtr = sr + lastIdx;
    SR__ *elementPtr = sr + 1;            // start the search at s_xx[1]

    lastElementPtr->d_token = d_token__;// set search-token

    while (elementPtr->d_token != d_token__)
        ++elementPtr;

    if (elementPtr == lastElementPtr)   // reached the last element
    {
        if (elementPtr->d_action < 0)   // default reduction
        {
            return elementPtr->d_action;                
        }

        // No default reduction, so token not found, so error.
        throw UNEXPECTED_TOKEN__;
    }

    // not at the last element: inspect the nature of the action
    // (< 0: reduce, 0: ACCEPT, > 0: shift)

    int action = elementPtr->d_action;


    return action;
}

    // When an error has occurred, pop elements off the stack until the top
    // state has an error-item. If none is found, the default recovery
    // mode (which is to abort) is activated. 
    //
    // If EOF is encountered without being appropriate for the current state,
    // then the error recovery will fall back to the default recovery mode.
    // (i.e., parsing terminates)
void Parser::errorRecovery()
try
{
    if (d_acceptedTokens__ >= d_requiredTokens__)// only generate an error-
    {                                           // message if enough tokens 
        ++d_nErrors__;                          // were accepted. Otherwise
        error("Syntax error");                  // simply skip input

    }


    // get the error state
    while (not (s_state[top__()][0].d_type & ERR_ITEM))
    {
        pop__();
    }

    // In the error state, lookup a token allowing us to proceed.
    // Continuation may be possible following multiple reductions,
    // but eventuall a shift will be used, requiring the retrieval of
    // a terminal token. If a retrieved token doesn't match, the catch below 
    // will ensure the next token is requested in the while(true) block
    // implemented below:

    int lastToken = d_token__;                  // give the unexpected token a
                                                // chance to be processed
                                                // again.

    pushToken__(_error_);                       // specify _error_ as next token
    push__(lookup(true));                       // push the error state

    d_token__ = lastToken;                      // reactivate the unexpected
                                                // token (we're now in an
                                                // ERROR state).

    bool gotToken = true;                       // the next token is a terminal

    while (true)
    {
        try
        {
            if (s_state[d_state__]->d_type & REQ_TOKEN)
            {
                gotToken = d_token__ == _UNDETERMINED_;
                nextToken();                    // obtain next token
            }
            
            int action = lookup(true);

            if (action > 0)                 // push a new state
            {
                push__(action);
                popToken__();

                if (gotToken)
                {

                    d_acceptedTokens__ = 0;
                    return;
                }
            }
            else if (action < 0)
            {
                // no actions executed on recovery but save an already 
                // available token:
                if (d_token__ != _UNDETERMINED_)
                    pushToken__(d_token__);
 
                                            // next token is the rule's LHS
                reduce__(s_productionInfo[-action]); 
            }
            else
                ABORT();                    // abort when accepting during
                                            // error recovery
        }
        catch (...)
        {
            if (d_token__ == _EOF_)
                ABORT();                    // saw inappropriate _EOF_
                      
            popToken__();                   // failing token now skipped
        }
    }
}
catch (ErrorRecovery__)       // This is: DEFAULT_RECOVERY_MODE
{
    ABORT();
}

    // The parsing algorithm:
    // Initially, state 0 is pushed on the stack, and d_token__ as well as
    // d_nextToken__ are initialized to _UNDETERMINED_. 
    //
    // Then, in an eternal loop:
    //
    //  1. If a state does not have REQ_TOKEN no token is assigned to
    //     d_token__. If the state has REQ_TOKEN, nextToken() is called to
    //      determine d_nextToken__ and d_token__ is set to
    //     d_nextToken__. nextToken() will not call lex() unless d_nextToken__ is 
    //     _UNDETERMINED_. 
    //
    //  2. lookup() is called: 
    //     d_token__ is stored in the final element's d_token field of the
    //     state's SR_ array. 
    //
    //  3. The current token is looked up in the state's SR_ array
    //
    //  4. Depending on the result of the lookup() function the next state is
    //     shifted on the parser's stack, a reduction by some rule is applied,
    //     or the parsing function returns ACCEPT(). When a reduction is
    //     called for, any action that may have been defined for that
    //     reduction is executed.
    //
    //  5. An error occurs if d_token__ is not found, and the state has no
    //     default reduction. Error handling was described at the top of this
    //     file.

int Parser::parse()
try 
{
    push__(0);                              // initial state
    clearin();                              // clear the tokens.

    while (true)
    {
        try
        {
            if (s_state[d_state__]->d_type & REQ_TOKEN)
                nextToken();                // obtain next token


            int action = lookup(false);     // lookup d_token__ in d_state__

            if (action > 0)                 // SHIFT: push a new state
            {
                push__(action);
                popToken__();               // token processed
            }
            else if (action < 0)            // REDUCE: execute and pop.
            {
                executeAction(-action);
                                            // next token is the rule's LHS
                reduce__(s_productionInfo[-action]); 
            }
            else 
                ACCEPT();
        }
        catch (ErrorRecovery__)
        {
            errorRecovery();
        }
    }
}
catch (Return__ retValue)
{
    return retValue;
}




