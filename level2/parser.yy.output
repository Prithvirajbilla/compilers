[[parser.yy (info)] Line 533: 
Production Rules
(rule precedences determined from %prec or 1st terminal between parentheses):
1: program ->  declaration_statement_list procedure_name #0001 procedure_body
2: #0001 ->  <empty>
3: program ->  procedure_name #0002 procedure_body
4: #0002 ->  <empty>
5: procedure_name (NAME) ->  NAME '(' ')'
6: procedure_body ('{') ->  '{' declaration_statement_list #0003 basic_block_list '}'
7: #0003 ->  <empty>
8: procedure_body ('{') ->  '{' basic_block_list '}'
9: declaration_statement_list ->  declaration_statement
10: declaration_statement_list ->  declaration_statement_list declaration_statement
11: declaration_statement (INTEGER) ->  INTEGER NAME ';'
12: declaration_statement (FLOAT) ->  FLOAT NAME ';'
13: declaration_statement (DOUBLE) ->  DOUBLE NAME ';'
14: basic_block_list ->  basic_block_list basic_block
15: basic_block_list ->  basic_block
16: basic_block (basicblock_number) ->  basicblock_number ':' executable_statement_list
17: executable_statement_list ->  assignment_statement_list
18: executable_statement_list (RETURN) ->  assignment_statement_list RETURN ';'
19: executable_statement_list ->  assignment_statement_list IFELSE
20: executable_statement_list ->  assignment_statement_list GOTO_exp
21: assignment_statement_list ->  <empty>
22: assignment_statement_list ->  assignment_statement_list assignment_statement
23: assignment_statement (ASSIGN_OP) ->  variable ASSIGN_OP conditional_exp ';'
24: IFELSE (IF) ->  IF '(' conditional_exp ')' GOTO_exp ELSE GOTO_exp
25: GOTO_exp (GOTO) ->  GOTO basicblock_number ';'
26: conditional_exp (OP2) ->  conditional_exp OP2 conditional_exp
27: conditional_exp (OP3) ->  conditional_exp OP3 conditional_exp
28: conditional_exp (OP4) ->  conditional_exp OP4 conditional_exp
29: conditional_exp (OP5) ->  conditional_exp OP5 conditional_exp
30: conditional_exp (OP6) ->  conditional_exp OP6 conditional_exp
31: conditional_exp (OP7) ->  conditional_exp OP7 conditional_exp
32: conditional_exp ('+') ->  conditional_exp '+' conditional_exp
33: conditional_exp ('-') ->  conditional_exp '-' conditional_exp
34: conditional_exp ('*') ->  conditional_exp '*' conditional_exp
35: conditional_exp ('/') ->  conditional_exp '/' conditional_exp
36: conditional_exp ('-') ->  '-' conditional_exp
37: conditional_exp ->  variable
38: conditional_exp ->  constant
39: conditional_exp ('(') ->  '(' FLOAT ')' conditional_exp
40: conditional_exp ('(') ->  '(' DOUBLE ')' conditional_exp
41: conditional_exp ('(') ->  '(' INTEGER ')' conditional_exp
42: conditional_exp ('(') ->  '(' conditional_exp ')'
43: variable (NAME) ->  NAME
44: constant (INTEGER_NUMBER) ->  INTEGER_NUMBER
45: constant (FLOAT_NUMBER) ->  FLOAT_NUMBER
46: program_$ ->  program

[[parser.yy (info)] 
Symbolic Terminal tokens:
       error
       EOF
   257: INTEGER_NUMBER
   258: basicblock_number
   259: FLOAT_NUMBER
   260: NAME
   261: RETURN
   262: INTEGER
   263: FLOAT
   264: DOUBLE
   265: IF
   266: ELSE
   267: GOTO
   268: ASSIGN_OP
    47: '/'
    42: '*'
    45: '-'
    43: '+'
   269: OP2
   270: OP3
   271: OP7
   272: OP5
   273: OP6
   274: OP4
    40: '('
    41: ')'
   123: '{'
   125: '}'
    59: ';'
    58: ':'

[[parser.yy (info)] 
Grammar States: 
[[parser.yy (info)] State 0:
46: program_$ ->  . program 
  0:   On program to state 1
  1:   On declaration_statement_list to state 2
  2:   On procedure_name to state 3
  3:   On declaration_statement to state 4
  4:   On NAME to state 5
  5:   On INTEGER to state 6
  6:   On FLOAT to state 7
  7:   On DOUBLE to state 8


State 1:
46: program_$ -> program  . 


State 2:
1: program -> declaration_statement_list  . procedure_name #0001 procedure_body 
10: declaration_statement_list -> declaration_statement_list  . declaration_statement 
  0:   On procedure_name to state 9
  1:   On declaration_statement to state 10
  2:   On NAME to state 5
  3:   On INTEGER to state 6
  4:   On FLOAT to state 7
  5:   On DOUBLE to state 8


State 3:
3: program -> procedure_name  . #0002 procedure_body 
  0:   On #0002 to state 11
  Reduce by 4: #0002 ->  . 


State 4:
9: declaration_statement_list -> declaration_statement  . 
  Reduce by 9: declaration_statement_list -> declaration_statement  . 


State 5:
5: procedure_name -> NAME  . '(' ')' 
  0:   On '(' to state 12


State 6:
11: declaration_statement -> INTEGER  . NAME ';' 
  0:   On NAME to state 13


State 7:
12: declaration_statement -> FLOAT  . NAME ';' 
  0:   On NAME to state 14


State 8:
13: declaration_statement -> DOUBLE  . NAME ';' 
  0:   On NAME to state 15


State 9:
1: program -> declaration_statement_list procedure_name  . #0001 procedure_body 
  0:   On #0001 to state 16
  Reduce by 2: #0001 ->  . 


State 10:
10: declaration_statement_list -> declaration_statement_list declaration_statement  . 
  Reduce by 10: declaration_statement_list -> declaration_statement_list declaration_statement  . 


State 11:
3: program -> procedure_name #0002  . procedure_body 
  0:   On procedure_body to state 17
  1:   On '{' to state 18


State 12:
5: procedure_name -> NAME '('  . ')' 
  0:   On ')' to state 19


State 13:
11: declaration_statement -> INTEGER NAME  . ';' 
  0:   On ';' to state 20


State 14:
12: declaration_statement -> FLOAT NAME  . ';' 
  0:   On ';' to state 21


State 15:
13: declaration_statement -> DOUBLE NAME  . ';' 
  0:   On ';' to state 22


State 16:
1: program -> declaration_statement_list procedure_name #0001  . procedure_body 
  0:   On procedure_body to state 23
  1:   On '{' to state 18


State 17:
3: program -> procedure_name #0002 procedure_body  . 
  Reduce by 3: program -> procedure_name #0002 procedure_body  . 


State 18:
6: procedure_body -> '{'  . declaration_statement_list #0003 basic_block_list '}' 
8: procedure_body -> '{'  . basic_block_list '}' 
  0:   On declaration_statement_list to state 24
  1:   On basic_block_list to state 25
  2:   On declaration_statement to state 4
  3:   On basic_block to state 26
  4:   On INTEGER to state 6
  5:   On FLOAT to state 7
  6:   On DOUBLE to state 8
  7:   On basicblock_number to state 27


State 19:
5: procedure_name -> NAME '(' ')'  . 
  Reduce by 5: procedure_name -> NAME '(' ')'  . 


State 20:
11: declaration_statement -> INTEGER NAME ';'  . 
  Reduce by 11: declaration_statement -> INTEGER NAME ';'  . 


State 21:
12: declaration_statement -> FLOAT NAME ';'  . 
  Reduce by 12: declaration_statement -> FLOAT NAME ';'  . 


State 22:
13: declaration_statement -> DOUBLE NAME ';'  . 
  Reduce by 13: declaration_statement -> DOUBLE NAME ';'  . 


State 23:
1: program -> declaration_statement_list procedure_name #0001 procedure_body  . 
  Reduce by 1: program -> declaration_statement_list procedure_name #0001 procedure_body  . 


State 24:
6: procedure_body -> '{' declaration_statement_list  . #0003 basic_block_list '}' 
10: declaration_statement_list -> declaration_statement_list  . declaration_statement 
  0:   On #0003 to state 28
  1:   On declaration_statement to state 10
  2:   On INTEGER to state 6
  3:   On FLOAT to state 7
  4:   On DOUBLE to state 8
  Reduce by 7: #0003 ->  . 


State 25:
8: procedure_body -> '{' basic_block_list  . '}' 
14: basic_block_list -> basic_block_list  . basic_block 
  0:   On '}' to state 29
  1:   On basic_block to state 30
  2:   On basicblock_number to state 27


State 26:
15: basic_block_list -> basic_block  . 
  Reduce by 15: basic_block_list -> basic_block  . 


State 27:
16: basic_block -> basicblock_number  . ':' executable_statement_list 
  0:   On ':' to state 31


State 28:
6: procedure_body -> '{' declaration_statement_list #0003  . basic_block_list '}' 
  0:   On basic_block_list to state 32
  1:   On basic_block to state 26
  2:   On basicblock_number to state 27


State 29:
8: procedure_body -> '{' basic_block_list '}'  . 
  Reduce by 8: procedure_body -> '{' basic_block_list '}'  . 


State 30:
14: basic_block_list -> basic_block_list basic_block  . 
  Reduce by 14: basic_block_list -> basic_block_list basic_block  . 


State 31:
16: basic_block -> basicblock_number ':'  . executable_statement_list 
  0:   On executable_statement_list to state 33
  1:   On assignment_statement_list to state 34
  Reduce by 21: assignment_statement_list ->  . 


State 32:
6: procedure_body -> '{' declaration_statement_list #0003 basic_block_list  . '}' 
14: basic_block_list -> basic_block_list  . basic_block 
  0:   On '}' to state 35
  1:   On basic_block to state 30
  2:   On basicblock_number to state 27


State 33:
16: basic_block -> basicblock_number ':' executable_statement_list  . 
  Reduce by 16: basic_block -> basicblock_number ':' executable_statement_list  . 


State 34:
17: executable_statement_list -> assignment_statement_list  . 
18: executable_statement_list -> assignment_statement_list  . RETURN ';' 
19: executable_statement_list -> assignment_statement_list  . IFELSE 
20: executable_statement_list -> assignment_statement_list  . GOTO_exp 
22: assignment_statement_list -> assignment_statement_list  . assignment_statement 
  0:   On RETURN to state 36
  1:   On IFELSE to state 37
  2:   On GOTO_exp to state 38
  3:   On assignment_statement to state 39
  4:   On IF to state 40
  5:   On GOTO to state 41
  6:   On variable to state 42
  7:   On NAME to state 43
  Reduce by 17: executable_statement_list -> assignment_statement_list  . 


State 35:
6: procedure_body -> '{' declaration_statement_list #0003 basic_block_list '}'  . 
  Reduce by 6: procedure_body -> '{' declaration_statement_list #0003 basic_block_list '}'  . 


State 36:
18: executable_statement_list -> assignment_statement_list RETURN  . ';' 
  0:   On ';' to state 44


State 37:
19: executable_statement_list -> assignment_statement_list IFELSE  . 
  Reduce by 19: executable_statement_list -> assignment_statement_list IFELSE  . 


State 38:
20: executable_statement_list -> assignment_statement_list GOTO_exp  . 
  Reduce by 20: executable_statement_list -> assignment_statement_list GOTO_exp  . 


State 39:
22: assignment_statement_list -> assignment_statement_list assignment_statement  . 
  Reduce by 22: assignment_statement_list -> assignment_statement_list assignment_statement  . 


State 40:
24: IFELSE -> IF  . '(' conditional_exp ')' GOTO_exp ELSE GOTO_exp 
  0:   On '(' to state 45


State 41:
25: GOTO_exp -> GOTO  . basicblock_number ';' 
  0:   On basicblock_number to state 46


State 42:
23: assignment_statement -> variable  . ASSIGN_OP conditional_exp ';' 
  0:   On ASSIGN_OP to state 47


State 43:
43: variable -> NAME  . 
  Reduce by 43: variable -> NAME  . 


State 44:
18: executable_statement_list -> assignment_statement_list RETURN ';'  . 
  Reduce by 18: executable_statement_list -> assignment_statement_list RETURN ';'  . 


State 45:
24: IFELSE -> IF '('  . conditional_exp ')' GOTO_exp ELSE GOTO_exp 
  0:   On conditional_exp to state 48
  1:   On '-' to state 49
  2:   On variable to state 50
  3:   On constant to state 51
  4:   On '(' to state 52
  5:   On NAME to state 43
  6:   On INTEGER_NUMBER to state 53
  7:   On FLOAT_NUMBER to state 54


State 46:
25: GOTO_exp -> GOTO basicblock_number  . ';' 
  0:   On ';' to state 55


State 47:
23: assignment_statement -> variable ASSIGN_OP  . conditional_exp ';' 
  0:   On conditional_exp to state 56
  1:   On '-' to state 49
  2:   On variable to state 50
  3:   On constant to state 51
  4:   On '(' to state 52
  5:   On NAME to state 43
  6:   On INTEGER_NUMBER to state 53
  7:   On FLOAT_NUMBER to state 54


State 48:
24: IFELSE -> IF '(' conditional_exp  . ')' GOTO_exp ELSE GOTO_exp 
26: conditional_exp -> conditional_exp  . OP2 conditional_exp 
27: conditional_exp -> conditional_exp  . OP3 conditional_exp 
28: conditional_exp -> conditional_exp  . OP4 conditional_exp 
29: conditional_exp -> conditional_exp  . OP5 conditional_exp 
30: conditional_exp -> conditional_exp  . OP6 conditional_exp 
31: conditional_exp -> conditional_exp  . OP7 conditional_exp 
32: conditional_exp -> conditional_exp  . '+' conditional_exp 
33: conditional_exp -> conditional_exp  . '-' conditional_exp 
34: conditional_exp -> conditional_exp  . '*' conditional_exp 
35: conditional_exp -> conditional_exp  . '/' conditional_exp 
  0:   On ')' to state 57
  1:   On OP2 to state 58
  2:   On OP3 to state 59
  3:   On OP4 to state 60
  4:   On OP5 to state 61
  5:   On OP6 to state 62
  6:   On OP7 to state 63
  7:   On '+' to state 64
  8:   On '-' to state 65
  9:   On '*' to state 66
  10:   On '/' to state 67


State 49:
36: conditional_exp -> '-'  . conditional_exp 
  0:   On conditional_exp to state 68
  1:   On '-' to state 49
  2:   On variable to state 50
  3:   On constant to state 51
  4:   On '(' to state 52
  5:   On NAME to state 43
  6:   On INTEGER_NUMBER to state 53
  7:   On FLOAT_NUMBER to state 54


State 50:
37: conditional_exp -> variable  . 
  Reduce by 37: conditional_exp -> variable  . 


State 51:
38: conditional_exp -> constant  . 
  Reduce by 38: conditional_exp -> constant  . 


State 52:
39: conditional_exp -> '('  . FLOAT ')' conditional_exp 
40: conditional_exp -> '('  . DOUBLE ')' conditional_exp 
41: conditional_exp -> '('  . INTEGER ')' conditional_exp 
42: conditional_exp -> '('  . conditional_exp ')' 
  0:   On FLOAT to state 69
  1:   On DOUBLE to state 70
  2:   On INTEGER to state 71
  3:   On conditional_exp to state 72
  4:   On '-' to state 49
  5:   On variable to state 50
  6:   On constant to state 51
  7:   On '(' to state 52
  8:   On NAME to state 43
  9:   On INTEGER_NUMBER to state 53
  10:   On FLOAT_NUMBER to state 54


State 53:
44: constant -> INTEGER_NUMBER  . 
  Reduce by 44: constant -> INTEGER_NUMBER  . 


State 54:
45: constant -> FLOAT_NUMBER  . 
  Reduce by 45: constant -> FLOAT_NUMBER  . 


State 55:
25: GOTO_exp -> GOTO basicblock_number ';'  . 
  Reduce by 25: GOTO_exp -> GOTO basicblock_number ';'  . 


State 56:
23: assignment_statement -> variable ASSIGN_OP conditional_exp  . ';' 
26: conditional_exp -> conditional_exp  . OP2 conditional_exp 
27: conditional_exp -> conditional_exp  . OP3 conditional_exp 
28: conditional_exp -> conditional_exp  . OP4 conditional_exp 
29: conditional_exp -> conditional_exp  . OP5 conditional_exp 
30: conditional_exp -> conditional_exp  . OP6 conditional_exp 
31: conditional_exp -> conditional_exp  . OP7 conditional_exp 
32: conditional_exp -> conditional_exp  . '+' conditional_exp 
33: conditional_exp -> conditional_exp  . '-' conditional_exp 
34: conditional_exp -> conditional_exp  . '*' conditional_exp 
35: conditional_exp -> conditional_exp  . '/' conditional_exp 
  0:   On ';' to state 73
  1:   On OP2 to state 58
  2:   On OP3 to state 59
  3:   On OP4 to state 60
  4:   On OP5 to state 61
  5:   On OP6 to state 62
  6:   On OP7 to state 63
  7:   On '+' to state 64
  8:   On '-' to state 65
  9:   On '*' to state 66
  10:   On '/' to state 67


State 57:
24: IFELSE -> IF '(' conditional_exp ')'  . GOTO_exp ELSE GOTO_exp 
  0:   On GOTO_exp to state 74
  1:   On GOTO to state 41


State 58:
26: conditional_exp -> conditional_exp OP2  . conditional_exp 
  0:   On conditional_exp to state 75
  1:   On '-' to state 49
  2:   On variable to state 50
  3:   On constant to state 51
  4:   On '(' to state 52
  5:   On NAME to state 43
  6:   On INTEGER_NUMBER to state 53
  7:   On FLOAT_NUMBER to state 54


State 59:
27: conditional_exp -> conditional_exp OP3  . conditional_exp 
  0:   On conditional_exp to state 76
  1:   On '-' to state 49
  2:   On variable to state 50
  3:   On constant to state 51
  4:   On '(' to state 52
  5:   On NAME to state 43
  6:   On INTEGER_NUMBER to state 53
  7:   On FLOAT_NUMBER to state 54


State 60:
28: conditional_exp -> conditional_exp OP4  . conditional_exp 
  0:   On conditional_exp to state 77
  1:   On '-' to state 49
  2:   On variable to state 50
  3:   On constant to state 51
  4:   On '(' to state 52
  5:   On NAME to state 43
  6:   On INTEGER_NUMBER to state 53
  7:   On FLOAT_NUMBER to state 54


State 61:
29: conditional_exp -> conditional_exp OP5  . conditional_exp 
  0:   On conditional_exp to state 78
  1:   On '-' to state 49
  2:   On variable to state 50
  3:   On constant to state 51
  4:   On '(' to state 52
  5:   On NAME to state 43
  6:   On INTEGER_NUMBER to state 53
  7:   On FLOAT_NUMBER to state 54


State 62:
30: conditional_exp -> conditional_exp OP6  . conditional_exp 
  0:   On conditional_exp to state 79
  1:   On '-' to state 49
  2:   On variable to state 50
  3:   On constant to state 51
  4:   On '(' to state 52
  5:   On NAME to state 43
  6:   On INTEGER_NUMBER to state 53
  7:   On FLOAT_NUMBER to state 54


State 63:
31: conditional_exp -> conditional_exp OP7  . conditional_exp 
  0:   On conditional_exp to state 80
  1:   On '-' to state 49
  2:   On variable to state 50
  3:   On constant to state 51
  4:   On '(' to state 52
  5:   On NAME to state 43
  6:   On INTEGER_NUMBER to state 53
  7:   On FLOAT_NUMBER to state 54


State 64:
32: conditional_exp -> conditional_exp '+'  . conditional_exp 
  0:   On conditional_exp to state 81
  1:   On '-' to state 49
  2:   On variable to state 50
  3:   On constant to state 51
  4:   On '(' to state 52
  5:   On NAME to state 43
  6:   On INTEGER_NUMBER to state 53
  7:   On FLOAT_NUMBER to state 54


State 65:
33: conditional_exp -> conditional_exp '-'  . conditional_exp 
  0:   On conditional_exp to state 82
  1:   On '-' to state 49
  2:   On variable to state 50
  3:   On constant to state 51
  4:   On '(' to state 52
  5:   On NAME to state 43
  6:   On INTEGER_NUMBER to state 53
  7:   On FLOAT_NUMBER to state 54


State 66:
34: conditional_exp -> conditional_exp '*'  . conditional_exp 
  0:   On conditional_exp to state 83
  1:   On '-' to state 49
  2:   On variable to state 50
  3:   On constant to state 51
  4:   On '(' to state 52
  5:   On NAME to state 43
  6:   On INTEGER_NUMBER to state 53
  7:   On FLOAT_NUMBER to state 54


State 67:
35: conditional_exp -> conditional_exp '/'  . conditional_exp 
  0:   On conditional_exp to state 84
  1:   On '-' to state 49
  2:   On variable to state 50
  3:   On constant to state 51
  4:   On '(' to state 52
  5:   On NAME to state 43
  6:   On INTEGER_NUMBER to state 53
  7:   On FLOAT_NUMBER to state 54


State 68:
36: conditional_exp -> '-' conditional_exp  . 
26: conditional_exp -> conditional_exp  . OP2 conditional_exp 
27: conditional_exp -> conditional_exp  . OP3 conditional_exp 
28: conditional_exp -> conditional_exp  . OP4 conditional_exp 
29: conditional_exp -> conditional_exp  . OP5 conditional_exp 
30: conditional_exp -> conditional_exp  . OP6 conditional_exp 
31: conditional_exp -> conditional_exp  . OP7 conditional_exp 
32: conditional_exp -> conditional_exp  . '+' conditional_exp 
33: conditional_exp -> conditional_exp  . '-' conditional_exp 
34: conditional_exp -> conditional_exp  . '*' conditional_exp 
35: conditional_exp -> conditional_exp  . '/' conditional_exp 
  0:   On OP2 to state 58
  1:   On OP3 to state 59
  2:   On OP4 to state 60
  3:   On OP5 to state 61
  4:   On OP6 to state 62
  5:   On OP7 to state 63
  6 (removed by precedence):   On '+' to state 64
  7 (removed by precedence):   On '-' to state 65
  8 (removed by precedence):   On '*' to state 66
  9 (removed by precedence):   On '/' to state 67
  Reduce by 36: conditional_exp -> '-' conditional_exp  . 


State 69:
39: conditional_exp -> '(' FLOAT  . ')' conditional_exp 
  0:   On ')' to state 85


State 70:
40: conditional_exp -> '(' DOUBLE  . ')' conditional_exp 
  0:   On ')' to state 86


State 71:
41: conditional_exp -> '(' INTEGER  . ')' conditional_exp 
  0:   On ')' to state 87


State 72:
42: conditional_exp -> '(' conditional_exp  . ')' 
26: conditional_exp -> conditional_exp  . OP2 conditional_exp 
27: conditional_exp -> conditional_exp  . OP3 conditional_exp 
28: conditional_exp -> conditional_exp  . OP4 conditional_exp 
29: conditional_exp -> conditional_exp  . OP5 conditional_exp 
30: conditional_exp -> conditional_exp  . OP6 conditional_exp 
31: conditional_exp -> conditional_exp  . OP7 conditional_exp 
32: conditional_exp -> conditional_exp  . '+' conditional_exp 
33: conditional_exp -> conditional_exp  . '-' conditional_exp 
34: conditional_exp -> conditional_exp  . '*' conditional_exp 
35: conditional_exp -> conditional_exp  . '/' conditional_exp 
  0:   On ')' to state 88
  1:   On OP2 to state 58
  2:   On OP3 to state 59
  3:   On OP4 to state 60
  4:   On OP5 to state 61
  5:   On OP6 to state 62
  6:   On OP7 to state 63
  7:   On '+' to state 64
  8:   On '-' to state 65
  9:   On '*' to state 66
  10:   On '/' to state 67


State 73:
23: assignment_statement -> variable ASSIGN_OP conditional_exp ';'  . 
  Reduce by 23: assignment_statement -> variable ASSIGN_OP conditional_exp ';'  . 


State 74:
24: IFELSE -> IF '(' conditional_exp ')' GOTO_exp  . ELSE GOTO_exp 
  0:   On ELSE to state 89


State 75:
26: conditional_exp -> conditional_exp OP2 conditional_exp  . 
26: conditional_exp -> conditional_exp  . OP2 conditional_exp 
27: conditional_exp -> conditional_exp  . OP3 conditional_exp 
28: conditional_exp -> conditional_exp  . OP4 conditional_exp 
29: conditional_exp -> conditional_exp  . OP5 conditional_exp 
30: conditional_exp -> conditional_exp  . OP6 conditional_exp 
31: conditional_exp -> conditional_exp  . OP7 conditional_exp 
32: conditional_exp -> conditional_exp  . '+' conditional_exp 
33: conditional_exp -> conditional_exp  . '-' conditional_exp 
34: conditional_exp -> conditional_exp  . '*' conditional_exp 
35: conditional_exp -> conditional_exp  . '/' conditional_exp 
  0 (removed by precedence):   On OP2 to state 58
  1 (removed by precedence):   On OP3 to state 59
  2:   On OP4 to state 60
  3:   On OP5 to state 61
  4:   On OP6 to state 62
  5:   On OP7 to state 63
  6 (removed by precedence):   On '+' to state 64
  7 (removed by precedence):   On '-' to state 65
  8 (removed by precedence):   On '*' to state 66
  9 (removed by precedence):   On '/' to state 67
  Reduce by 26: conditional_exp -> conditional_exp OP2 conditional_exp  . 


State 76:
27: conditional_exp -> conditional_exp OP3 conditional_exp  . 
26: conditional_exp -> conditional_exp  . OP2 conditional_exp 
27: conditional_exp -> conditional_exp  . OP3 conditional_exp 
28: conditional_exp -> conditional_exp  . OP4 conditional_exp 
29: conditional_exp -> conditional_exp  . OP5 conditional_exp 
30: conditional_exp -> conditional_exp  . OP6 conditional_exp 
31: conditional_exp -> conditional_exp  . OP7 conditional_exp 
32: conditional_exp -> conditional_exp  . '+' conditional_exp 
33: conditional_exp -> conditional_exp  . '-' conditional_exp 
34: conditional_exp -> conditional_exp  . '*' conditional_exp 
35: conditional_exp -> conditional_exp  . '/' conditional_exp 
  0 (removed by precedence):   On OP2 to state 58
  1 (removed by precedence):   On OP3 to state 59
  2:   On OP4 to state 60
  3:   On OP5 to state 61
  4:   On OP6 to state 62
  5:   On OP7 to state 63
  6 (removed by precedence):   On '+' to state 64
  7 (removed by precedence):   On '-' to state 65
  8 (removed by precedence):   On '*' to state 66
  9 (removed by precedence):   On '/' to state 67
  Reduce by 27: conditional_exp -> conditional_exp OP3 conditional_exp  . 


State 77:
28: conditional_exp -> conditional_exp OP4 conditional_exp  . 
26: conditional_exp -> conditional_exp  . OP2 conditional_exp 
27: conditional_exp -> conditional_exp  . OP3 conditional_exp 
28: conditional_exp -> conditional_exp  . OP4 conditional_exp 
29: conditional_exp -> conditional_exp  . OP5 conditional_exp 
30: conditional_exp -> conditional_exp  . OP6 conditional_exp 
31: conditional_exp -> conditional_exp  . OP7 conditional_exp 
32: conditional_exp -> conditional_exp  . '+' conditional_exp 
33: conditional_exp -> conditional_exp  . '-' conditional_exp 
34: conditional_exp -> conditional_exp  . '*' conditional_exp 
35: conditional_exp -> conditional_exp  . '/' conditional_exp 
  0 (removed by precedence):   On OP2 to state 58
  1 (removed by precedence):   On OP3 to state 59
  2 (removed by precedence):   On OP4 to state 60
  3 (removed by precedence):   On OP5 to state 61
  4 (removed by precedence):   On OP6 to state 62
  5 (removed by precedence):   On OP7 to state 63
  6 (removed by precedence):   On '+' to state 64
  7 (removed by precedence):   On '-' to state 65
  8 (removed by precedence):   On '*' to state 66
  9 (removed by precedence):   On '/' to state 67
  Reduce by 28: conditional_exp -> conditional_exp OP4 conditional_exp  . 


State 78:
29: conditional_exp -> conditional_exp OP5 conditional_exp  . 
26: conditional_exp -> conditional_exp  . OP2 conditional_exp 
27: conditional_exp -> conditional_exp  . OP3 conditional_exp 
28: conditional_exp -> conditional_exp  . OP4 conditional_exp 
29: conditional_exp -> conditional_exp  . OP5 conditional_exp 
30: conditional_exp -> conditional_exp  . OP6 conditional_exp 
31: conditional_exp -> conditional_exp  . OP7 conditional_exp 
32: conditional_exp -> conditional_exp  . '+' conditional_exp 
33: conditional_exp -> conditional_exp  . '-' conditional_exp 
34: conditional_exp -> conditional_exp  . '*' conditional_exp 
35: conditional_exp -> conditional_exp  . '/' conditional_exp 
  0 (removed by precedence):   On OP2 to state 58
  1 (removed by precedence):   On OP3 to state 59
  2 (removed by precedence):   On OP4 to state 60
  3 (removed by precedence):   On OP5 to state 61
  4 (removed by precedence):   On OP6 to state 62
  5 (removed by precedence):   On OP7 to state 63
  6 (removed by precedence):   On '+' to state 64
  7 (removed by precedence):   On '-' to state 65
  8 (removed by precedence):   On '*' to state 66
  9 (removed by precedence):   On '/' to state 67
  Reduce by 29: conditional_exp -> conditional_exp OP5 conditional_exp  . 


State 79:
30: conditional_exp -> conditional_exp OP6 conditional_exp  . 
26: conditional_exp -> conditional_exp  . OP2 conditional_exp 
27: conditional_exp -> conditional_exp  . OP3 conditional_exp 
28: conditional_exp -> conditional_exp  . OP4 conditional_exp 
29: conditional_exp -> conditional_exp  . OP5 conditional_exp 
30: conditional_exp -> conditional_exp  . OP6 conditional_exp 
31: conditional_exp -> conditional_exp  . OP7 conditional_exp 
32: conditional_exp -> conditional_exp  . '+' conditional_exp 
33: conditional_exp -> conditional_exp  . '-' conditional_exp 
34: conditional_exp -> conditional_exp  . '*' conditional_exp 
35: conditional_exp -> conditional_exp  . '/' conditional_exp 
  0 (removed by precedence):   On OP2 to state 58
  1 (removed by precedence):   On OP3 to state 59
  2 (removed by precedence):   On OP4 to state 60
  3 (removed by precedence):   On OP5 to state 61
  4 (removed by precedence):   On OP6 to state 62
  5 (removed by precedence):   On OP7 to state 63
  6 (removed by precedence):   On '+' to state 64
  7 (removed by precedence):   On '-' to state 65
  8 (removed by precedence):   On '*' to state 66
  9 (removed by precedence):   On '/' to state 67
  Reduce by 30: conditional_exp -> conditional_exp OP6 conditional_exp  . 


State 80:
31: conditional_exp -> conditional_exp OP7 conditional_exp  . 
26: conditional_exp -> conditional_exp  . OP2 conditional_exp 
27: conditional_exp -> conditional_exp  . OP3 conditional_exp 
28: conditional_exp -> conditional_exp  . OP4 conditional_exp 
29: conditional_exp -> conditional_exp  . OP5 conditional_exp 
30: conditional_exp -> conditional_exp  . OP6 conditional_exp 
31: conditional_exp -> conditional_exp  . OP7 conditional_exp 
32: conditional_exp -> conditional_exp  . '+' conditional_exp 
33: conditional_exp -> conditional_exp  . '-' conditional_exp 
34: conditional_exp -> conditional_exp  . '*' conditional_exp 
35: conditional_exp -> conditional_exp  . '/' conditional_exp 
  0 (removed by precedence):   On OP2 to state 58
  1 (removed by precedence):   On OP3 to state 59
  2 (removed by precedence):   On OP4 to state 60
  3 (removed by precedence):   On OP5 to state 61
  4 (removed by precedence):   On OP6 to state 62
  5 (removed by precedence):   On OP7 to state 63
  6 (removed by precedence):   On '+' to state 64
  7 (removed by precedence):   On '-' to state 65
  8 (removed by precedence):   On '*' to state 66
  9 (removed by precedence):   On '/' to state 67
  Reduce by 31: conditional_exp -> conditional_exp OP7 conditional_exp  . 


State 81:
32: conditional_exp -> conditional_exp '+' conditional_exp  . 
26: conditional_exp -> conditional_exp  . OP2 conditional_exp 
27: conditional_exp -> conditional_exp  . OP3 conditional_exp 
28: conditional_exp -> conditional_exp  . OP4 conditional_exp 
29: conditional_exp -> conditional_exp  . OP5 conditional_exp 
30: conditional_exp -> conditional_exp  . OP6 conditional_exp 
31: conditional_exp -> conditional_exp  . OP7 conditional_exp 
32: conditional_exp -> conditional_exp  . '+' conditional_exp 
33: conditional_exp -> conditional_exp  . '-' conditional_exp 
34: conditional_exp -> conditional_exp  . '*' conditional_exp 
35: conditional_exp -> conditional_exp  . '/' conditional_exp 
  0:   On OP2 to state 58
  1:   On OP3 to state 59
  2:   On OP4 to state 60
  3:   On OP5 to state 61
  4:   On OP6 to state 62
  5:   On OP7 to state 63
  6 (removed by precedence):   On '+' to state 64
  7 (removed by precedence):   On '-' to state 65
  8 (removed by precedence):   On '*' to state 66
  9 (removed by precedence):   On '/' to state 67
  Reduce by 32: conditional_exp -> conditional_exp '+' conditional_exp  . 


State 82:
33: conditional_exp -> conditional_exp '-' conditional_exp  . 
26: conditional_exp -> conditional_exp  . OP2 conditional_exp 
27: conditional_exp -> conditional_exp  . OP3 conditional_exp 
28: conditional_exp -> conditional_exp  . OP4 conditional_exp 
29: conditional_exp -> conditional_exp  . OP5 conditional_exp 
30: conditional_exp -> conditional_exp  . OP6 conditional_exp 
31: conditional_exp -> conditional_exp  . OP7 conditional_exp 
32: conditional_exp -> conditional_exp  . '+' conditional_exp 
33: conditional_exp -> conditional_exp  . '-' conditional_exp 
34: conditional_exp -> conditional_exp  . '*' conditional_exp 
35: conditional_exp -> conditional_exp  . '/' conditional_exp 
  0:   On OP2 to state 58
  1:   On OP3 to state 59
  2:   On OP4 to state 60
  3:   On OP5 to state 61
  4:   On OP6 to state 62
  5:   On OP7 to state 63
  6 (removed by precedence):   On '+' to state 64
  7 (removed by precedence):   On '-' to state 65
  8 (removed by precedence):   On '*' to state 66
  9 (removed by precedence):   On '/' to state 67
  Reduce by 33: conditional_exp -> conditional_exp '-' conditional_exp  . 


State 83:
34: conditional_exp -> conditional_exp '*' conditional_exp  . 
26: conditional_exp -> conditional_exp  . OP2 conditional_exp 
27: conditional_exp -> conditional_exp  . OP3 conditional_exp 
28: conditional_exp -> conditional_exp  . OP4 conditional_exp 
29: conditional_exp -> conditional_exp  . OP5 conditional_exp 
30: conditional_exp -> conditional_exp  . OP6 conditional_exp 
31: conditional_exp -> conditional_exp  . OP7 conditional_exp 
32: conditional_exp -> conditional_exp  . '+' conditional_exp 
33: conditional_exp -> conditional_exp  . '-' conditional_exp 
34: conditional_exp -> conditional_exp  . '*' conditional_exp 
35: conditional_exp -> conditional_exp  . '/' conditional_exp 
  0:   On OP2 to state 58
  1:   On OP3 to state 59
  2:   On OP4 to state 60
  3:   On OP5 to state 61
  4:   On OP6 to state 62
  5:   On OP7 to state 63
  6:   On '+' to state 64
  7:   On '-' to state 65
  8 (removed by precedence):   On '*' to state 66
  9 (removed by precedence):   On '/' to state 67
  Reduce by 34: conditional_exp -> conditional_exp '*' conditional_exp  . 


State 84:
35: conditional_exp -> conditional_exp '/' conditional_exp  . 
26: conditional_exp -> conditional_exp  . OP2 conditional_exp 
27: conditional_exp -> conditional_exp  . OP3 conditional_exp 
28: conditional_exp -> conditional_exp  . OP4 conditional_exp 
29: conditional_exp -> conditional_exp  . OP5 conditional_exp 
30: conditional_exp -> conditional_exp  . OP6 conditional_exp 
31: conditional_exp -> conditional_exp  . OP7 conditional_exp 
32: conditional_exp -> conditional_exp  . '+' conditional_exp 
33: conditional_exp -> conditional_exp  . '-' conditional_exp 
34: conditional_exp -> conditional_exp  . '*' conditional_exp 
35: conditional_exp -> conditional_exp  . '/' conditional_exp 
  0:   On OP2 to state 58
  1:   On OP3 to state 59
  2:   On OP4 to state 60
  3:   On OP5 to state 61
  4:   On OP6 to state 62
  5:   On OP7 to state 63
  6:   On '+' to state 64
  7:   On '-' to state 65
  8 (removed by precedence):   On '*' to state 66
  9 (removed by precedence):   On '/' to state 67
  Reduce by 35: conditional_exp -> conditional_exp '/' conditional_exp  . 


State 85:
39: conditional_exp -> '(' FLOAT ')'  . conditional_exp 
  0:   On conditional_exp to state 90
  1:   On '-' to state 49
  2:   On variable to state 50
  3:   On constant to state 51
  4:   On '(' to state 52
  5:   On NAME to state 43
  6:   On INTEGER_NUMBER to state 53
  7:   On FLOAT_NUMBER to state 54


State 86:
40: conditional_exp -> '(' DOUBLE ')'  . conditional_exp 
  0:   On conditional_exp to state 91
  1:   On '-' to state 49
  2:   On variable to state 50
  3:   On constant to state 51
  4:   On '(' to state 52
  5:   On NAME to state 43
  6:   On INTEGER_NUMBER to state 53
  7:   On FLOAT_NUMBER to state 54


State 87:
41: conditional_exp -> '(' INTEGER ')'  . conditional_exp 
  0:   On conditional_exp to state 92
  1:   On '-' to state 49
  2:   On variable to state 50
  3:   On constant to state 51
  4:   On '(' to state 52
  5:   On NAME to state 43
  6:   On INTEGER_NUMBER to state 53
  7:   On FLOAT_NUMBER to state 54


State 88:
42: conditional_exp -> '(' conditional_exp ')'  . 
  Reduce by 42: conditional_exp -> '(' conditional_exp ')'  . 


State 89:
24: IFELSE -> IF '(' conditional_exp ')' GOTO_exp ELSE  . GOTO_exp 
  0:   On GOTO_exp to state 93
  1:   On GOTO to state 41


State 90:
39: conditional_exp -> '(' FLOAT ')' conditional_exp  . 
26: conditional_exp -> conditional_exp  . OP2 conditional_exp 
27: conditional_exp -> conditional_exp  . OP3 conditional_exp 
28: conditional_exp -> conditional_exp  . OP4 conditional_exp 
29: conditional_exp -> conditional_exp  . OP5 conditional_exp 
30: conditional_exp -> conditional_exp  . OP6 conditional_exp 
31: conditional_exp -> conditional_exp  . OP7 conditional_exp 
32: conditional_exp -> conditional_exp  . '+' conditional_exp 
33: conditional_exp -> conditional_exp  . '-' conditional_exp 
34: conditional_exp -> conditional_exp  . '*' conditional_exp 
35: conditional_exp -> conditional_exp  . '/' conditional_exp 
  0:   On OP2 to state 58
  1:   On OP3 to state 59
  2:   On OP4 to state 60
  3:   On OP5 to state 61
  4:   On OP6 to state 62
  5:   On OP7 to state 63
  6:   On '+' to state 64
  7:   On '-' to state 65
  8:   On '*' to state 66
  9:   On '/' to state 67
  Reduce by 39: conditional_exp -> '(' FLOAT ')' conditional_exp  . 


State 91:
40: conditional_exp -> '(' DOUBLE ')' conditional_exp  . 
26: conditional_exp -> conditional_exp  . OP2 conditional_exp 
27: conditional_exp -> conditional_exp  . OP3 conditional_exp 
28: conditional_exp -> conditional_exp  . OP4 conditional_exp 
29: conditional_exp -> conditional_exp  . OP5 conditional_exp 
30: conditional_exp -> conditional_exp  . OP6 conditional_exp 
31: conditional_exp -> conditional_exp  . OP7 conditional_exp 
32: conditional_exp -> conditional_exp  . '+' conditional_exp 
33: conditional_exp -> conditional_exp  . '-' conditional_exp 
34: conditional_exp -> conditional_exp  . '*' conditional_exp 
35: conditional_exp -> conditional_exp  . '/' conditional_exp 
  0:   On OP2 to state 58
  1:   On OP3 to state 59
  2:   On OP4 to state 60
  3:   On OP5 to state 61
  4:   On OP6 to state 62
  5:   On OP7 to state 63
  6:   On '+' to state 64
  7:   On '-' to state 65
  8:   On '*' to state 66
  9:   On '/' to state 67
  Reduce by 40: conditional_exp -> '(' DOUBLE ')' conditional_exp  . 


State 92:
41: conditional_exp -> '(' INTEGER ')' conditional_exp  . 
26: conditional_exp -> conditional_exp  . OP2 conditional_exp 
27: conditional_exp -> conditional_exp  . OP3 conditional_exp 
28: conditional_exp -> conditional_exp  . OP4 conditional_exp 
29: conditional_exp -> conditional_exp  . OP5 conditional_exp 
30: conditional_exp -> conditional_exp  . OP6 conditional_exp 
31: conditional_exp -> conditional_exp  . OP7 conditional_exp 
32: conditional_exp -> conditional_exp  . '+' conditional_exp 
33: conditional_exp -> conditional_exp  . '-' conditional_exp 
34: conditional_exp -> conditional_exp  . '*' conditional_exp 
35: conditional_exp -> conditional_exp  . '/' conditional_exp 
  0:   On OP2 to state 58
  1:   On OP3 to state 59
  2:   On OP4 to state 60
  3:   On OP5 to state 61
  4:   On OP6 to state 62
  5:   On OP7 to state 63
  6:   On '+' to state 64
  7:   On '-' to state 65
  8:   On '*' to state 66
  9:   On '/' to state 67
  Reduce by 41: conditional_exp -> '(' INTEGER ')' conditional_exp  . 


State 93:
24: IFELSE -> IF '(' conditional_exp ')' GOTO_exp ELSE GOTO_exp  . 
  Reduce by 24: IFELSE -> IF '(' conditional_exp ')' GOTO_exp ELSE GOTO_exp  . 



